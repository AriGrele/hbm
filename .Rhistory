#################################################################################
clamp=function(x,minimum,maximum){return(ifelse(x<minimum,minimum,ifelse(x>maximum,maximum,x)))}
randseq=function(x,size){out=c();for(i in 1:size){out=c(out,sample(x,1))};return(out)}
fixedmean=function(n,m,d){
out=c(rnorm(n-1,m,d))
return(c(out,(m-sum(out)/n)*n))}
# x => list(distrubition, mean, sd or other parameter)
# y => list(x,alpha,slope)
# g => list(groups,sd)
mixed=function(n,params){
data=setNames(as.data.frame(matrix(ncol=length(names(params)),nrow=n)),names(params))
rslope=list();ralpha=list()
resp=names(params)[sapply(names(params),\(x)length(params[[x]])>=3&is.character(params[[x]][[1]]))]
for(p in setdiff(names(params),resp)){
if(length(params[[p]])==2){
data[p]=randseq(params[[p]][[1]],n)
rslope[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[3]],params[[p]][[2]]),params[[p]][[1]])
ralpha[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[2]],params[[p]][[2]]),params[[p]][[1]])}}
for(p in setdiff(names(params),names(rslope))){
if(length(params[[p]])>=3){
if(is.function(params[[p]][[1]])){data[p]=params[[p]][[1]](n,params[[p]][[2]],params[[p]][[3]])}
else{
slope=rep(1/(mean(rslope[[1]])^(length(rslope)-1)),n)
alpha=rep(0,n)
for(i in names(rslope)){
slope=slope*rslope[[i]][data[,i]]
alpha=alpha+ralpha[[i]][data[,i]]/length(names(ralpha))}
data[p]=data[params[[p]][[1]]]*slope+alpha+rnorm(n,0,params[[p]][[2]])}}}
return(list(data,ralpha,rslope))}
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
ggplot(data,aes(x=mass,y=abs(length),color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(site),rows=vars(species))+
theme_classic()
# #single level
# o=hbm(rbind(data,data),length~mass+(site))
# summary(o)
# ocean(o,'mass','site')[[1]]
# polka(o,'mass','site')[[1]]
# bass(o,'mass','site')[[1]]
#
# #multiple levels
# o=hbm(data,length~mass+(site+species))
# summary(o)
# ocean(o,'mass','species')[[1]]
# polka(o,'mass','species')[[1]]
# bass(o,'mass','species')[[1]]
#
# #interaction
# o=hbm(data,length~mass:sex+(site))
# summary(o)
# ocean(o,'mass','site',interaction='sex')[[1]]
# polka(o,'mass','site',interaction='sex')[[1]]
# bass(o,'mass','site',interaction='sex')[[1]]
set.seed(1)
o=hbm(data,length~mass+(site))
summary(o)
write.csv(summary(o),'first.csv')
o@jags_model
#
# data$sex=as.numeric(data$sex)
# model='mass~length+sex
# length~sex'
# b=semb(data,model)
fits(o)
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model==''){
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})}
else{output@model_name=output@source_model}
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
tryCatch(traces(output,cull=9),error=function(e){print(e)})
tryCatch(write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F),
error=function(e){print(e)})
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
o=hbm(data,length~mass+(site),source_model='moose')
o
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model!=''){output@model_name=output@source_model}
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})}
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model!=''){output@model_name=output@source_model}
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
tryCatch(traces(output,cull=9),error=function(e){print(e)})
tryCatch(write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F),
error=function(e){print(e)})
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
o=hbm(data,length~mass+(site),source_model='moose')
?dimnames
o@name
output
o
o=hbm(data,length~mass+(site),source_model='moose')
summary(o)
#################################################################################
setMethod("summary","hbm_object",function(hbm){                                 #creates summary aggregation of model output
l=1+length(hbm@vars[[2]])
p=list()
for(i in 1:l){p[[i]]=hbm@output[,i]}
a=with(hbm@output,aggregate(response,p,pd))
a$mean=with(hbm@output,aggregate(response,p,mean))$x
a$CIl=with(hbm@output,aggregate(response,p,function(x) quantile(x,0.025)))$x
a$CIu=with(hbm@output,aggregate(response,p,function(x) quantile(x,0.975)))$x
a=setNames(a,c(names(hbm@output)[-c(length(hbm@output))],
'PD','mean','CI_lower','CI_upper'))
return(a)})
args getGeneric('summary')
args(getGeneric('summary'))
#################################################################################
setMethod("summary","hbm_object",function(object){                                 #creates summary aggregation of model output
l=1+length(object@vars[[2]])
p=list()
for(i in 1:l){p[[i]]=object@output[,i]}
a=with(object@output,aggregate(response,p,pd))
a$mean=with(object@output,aggregate(response,p,mean))$x
a$CIl=with(object@output,aggregate(response,p,function(x) quantile(x,0.025)))$x
a$CIu=with(object@output,aggregate(response,p,function(x) quantile(x,0.975)))$x
a=setNames(a,c(names(object@output)[-c(length(object@output))],
'PD','mean','CI_lower','CI_upper'))
return(a)})
summary(o)
o=hbm(data,length~mass+(site),source_model='moose')
summary(o)
write.csv(summary(o),'gamma.csv')
fits(o)
set.seed(1)
o=hbm(data,length~mass+(site),source_model='moose')
summary(o)
write.csv(summary(o),'gamma.csv')
set.seed(1)
o=hbm(data,length~mass+(site),source_model='')
write.csv(summary(o),'first.csv')
set.seed(1)
o=hbm(data,length~mass+(site),source_model='moose')
set.seed(1)
o=hbm(data,length~mass+(site),source_model='moose')
write.csv(summary(o),'gamma.csv')
write.csv(summary(o),'gamma.csv')
o@jags_model
fits(o)
set.seed(1)
o1=hbm(data,length~mass+(site),source_model='')
set.seed(1)
o2=hbm(data,length~mass+(site),source_model='moose')
fits(o1,o2)
fits(o1)
fits(o2)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=data$length+rgamma(1,1/exp(data$mass))
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth()
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
hist(data$length)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=rgamma(1,1/exp(data$length))
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
hist(data$length)
plot(density(data$length))
data$length
?rgamma
data$length=data$length*rgamma(200,1)
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=data$length*rgamma(200,1)
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
plot(density(data$length))
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=data$length*rgamma(200,1)
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=rgamma(200,data$length)
data$length=rgamma(200,abs(data$length))
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=rgamma(200,abs(data$length))
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
plot(density(data$length))
ggplot(data,aes(x=mass,y=abs(length),color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(site),rows=vars(species))+
theme_classic()
set.seed(1)
o1=hbm(data,length~mass+(site),source_model='')
set.seed(1)
o2=hbm(data,length~mass+(site),source_model='moose')
fits(o1)
fits(o2)
set.seed(1)
o1=hbm(data,length~mass+(site),source_model='')
fits(o1)
set.seed(1)
o2=hbm(data,length~mass+(site),source_model='moose')
fits(o2)
#
summary(o1)
summary(o2)
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma'))){return()}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))')))}
set.seed(1)
o1=hbm(data,length~mass+(site),dist='dnorm')
fits(o1)
set.seed(1)
o2=hbm(data,length~mass+(site),dist='dgamma')
fits(o2)
summary(o1)
summary(o2)
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm','dgamma'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model!=''){output@model_name=output@source_model}
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
tryCatch(traces(output,cull=9),error=function(e){print(e)})
tryCatch(write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F),
error=function(e){print(e)})
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
o2=hbm(data,length~mass+(site),dist='dgamma')
fits(o2)
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma','dbin'))){return()}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))'),
'dbern'=str_interp('${hbm@dist}(ilogit(mu[i]))')))}
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm','dgamma','dbern'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model!=''){output@model_name=output@source_model}
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
tryCatch(traces(output,cull=9),error=function(e){print(e)})
tryCatch(write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F),
error=function(e){print(e)})
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma','dbin'))){return()}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))'),
'dbern'=str_interp('${hbm@dist}(ilogit(mu[i]))')))}
o3=hbm(data,length~mass+(site),dist='dbern')
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma','dbern'))){return('Invalid dist')}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))'),
'dbern'=str_interp('${hbm@dist}(ilogit(mu[i]))')))}
set.seed(1)
o3=hbm(data,length~mass+(site),dist='dbern')
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=(rgamma(200,abs(data$length))>50)+1
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data$length=(rgamma(200,abs(data$length))>50)+0
ggplot(data,aes(x=mass,y=length,color=site))+geom_point()+geom_smooth(method=lm)
plot(density(data$length))
set.seed(1)
o3=hbm(data,length~mass+(site),dist='dbern')
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma','dbern'))){return('Invalid dist')}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))'),
'dbern'=str_interp('${hbm@dist}(ilogit(mu[i])*1.000000001)')))}
o3=hbm(data,length~mass+(site),dist='dbern')
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm','dgamma','dbern'))){return('Invalid dist')}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)'),
'dgamma'=str_interp('${hbm@dist}(sigma,sigma/exp(mu[i]))'),
'dbern'=str_interp('${hbm@dist}(ilogit(mu[i]*1.000000001))')))}
o3=hbm(data,length~mass+(site),dist='dbern')
o3=hbm(data,length~mass+(site),source_model='moose')
o3
set.seed(1)
o3=hbm(data,length~mass+(site),source_model='moose')
unique(data$length)
