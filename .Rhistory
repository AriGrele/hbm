hbm@filter['site']
hbm@filter[regexpr('site',names(hbm@filter))>0]
names(hbm@filter)
hbm@filter
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[regexpr('site',names(hbm@filter))>0]
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr('site',names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[n]=sapply(hbm@data[,n],\(x)filter[as.character(x)])
}
filter
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr('site',names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])
}
hbm@model_data[[n]]
filter
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])
}
hbm@model_data[[n]]
hbm@model_data
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species),format='mean')
o1@model_data
o1@model_data$species
o1@model_data$species|>names()
o1=hbm(mix,length~mass+sex+(site+species))
o1=hbm(mix,length~mass+sex+(site+species),source_model='test')
View(as.data.frame(o1@model_data[c('site','species')]))
View(unique(as.data.frame(o1@model_data[c('site','species')])))
o1@filter
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species),source_model='test')
o1@filter
hbm=o1
hbm@model_data=list('N'=nrow(hbm@data))
hbm@model_data[as.character(hbm@input$model)[2]]=
list(hbm@data[,as.character(hbm@input$model)[2]])
full_names=c()
for(n in hbm@variables){full_names=c(full_names,strsplit(n,':')[[1]])}
hbm@variables=unique(full_names)
for(n in unique(c(hbm@vars[[1]],hbm@variables))){
if(!is.numeric(hbm@data[,n])){
hbm@model_data[n]=list(as.numeric(as.factor(hbm@data[,n])))}
else{hbm@model_data[n]=list(hbm@data[,n])}}
convert=list()
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[regexpr('site',names(hbm@filter))>0]
names(hbm@filter)
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=list(counts)}}
hbm@filter
unique(hbm@model_data[c('site','species')])
unique(as.data.frame(hbm@model_data[c('site','species')]))
hbm@filter
filter
convert=list()
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[regexpr('site',names(hbm@filter))>0]
names(hbm@filter)
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter1=setNames(filter[,2],as.character(filter[,1]))
filter2=setNames(filter[,3],as.character(filter[,2]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter2[filter1[as.character(x)]])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=list(counts)}}
unique(as.data.frame(hbm@model_data[c('site','species')]))
hbm@filter
n='site'
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter1=setNames(filter[,2],as.character(filter[,1]))
filter2=setNames(filter[,3],as.character(filter[,2]))
filter1['A']
filter2[1]
filter2['1']
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter1=setNames(as.character(filter[,2]),as.character(filter[,1]))
filter2=setNames(filter[,3],as.character(filter[,2]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter2[filter1[as.character(x)]])}
unique(as.data.frame(hbm@model_data[c('site','species')]))
filter
hbm@filter
hbm@filter[1:length(hbm@vars[[2]][-1])]=
pastedown(hbm@filter[1:length(hbm@vars[[2]][-1])],hbm@vars[[2]][-1])
hbm@filter
hbm@data=pastedown(hbm@data,hbm@vars[[2]][-1])
hbm@data
hbm@filter
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,2]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
unique(as.data.frame(hbm@model_data[c('site','species')]))
filter
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
unique(as.data.frame(hbm@model_data[c('site','species')]))
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species),source_model='test')
o1=hbm(mix,length~mass+sex+(site+species))
bass(o1,'mass','species')
hbm@filter
o1@filter
names(o1@filter)
i='site'
filter=o1@filter
group=unique(filter[,regexpr(i,names(filter))>0])
group
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
group_filter
hbm=o1
filterout=pastedown(hbm@output,hbm@vars[[2]][-1])
filterout
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
group_filter
i='species'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
group_filter
filter=pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1]))],hbm@vars[[2]][-1])
filter
filter=pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1])
filter
filterout[,i][hbm@output[,i]=='all']='all'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
group
filter=cbind(hbm@filter,pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1]))
filter
filterout[,i][hbm@output[,i]=='all']='all'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,4]),c('all',group[,1]))
group_filter
hbm@output[,i]=sapply(filterout[,i],\(x)group_filter[x])
hbm@output[,i]
unique(hbm@output[,i])
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
#hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
else{left=data.frame()}
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
filterout=pastedown(hbm@output,hbm@vars[[2]][-1])
filter=cbind(hbm@filter,pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1]))
for(i in unique(names(hbm@filter))){
filterout[,i][hbm@output[,i]=='all']='all'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,4]),c('all',group[,1]))
hbm@output[,i]=sapply(filterout[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
return(hbm)})
format_model(o1)
format_model(o1)->q
summary(q)
hbm=o1
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
#hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
else{left=data.frame()}
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
filterout=pastedown(hbm@output,hbm@vars[[2]][-1])
filter=cbind(hbm@filter,pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1]))
filter
for(i in unique(names(hbm@filter))){
filterout[,i][hbm@output[,i]=='all']='all'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,4]),c('all',group[,1]))
hbm@output[,i]=sapply(filterout[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
group_filter
unique( hbm@output[,i])
hbm@output=out
unique( hbm@output[,i])
i
count=0
cat('\nfixing hierarchy names\n')
filterout=pastedown(hbm@output,hbm@vars[[2]][-1])
filterout
unique(filterout[,i])
filter=cbind(hbm@filter,pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1]))
filter
filterout[,i][hbm@output[,i]=='all']='all'
unique(filterout[,i])
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,4]),c('all',group[,1]))
group_filter
unique(sapply(filterout[,i],\(x)group_filter[x]))
unique(filterout[,i])
group_filter["1_<>_1"]
group_filter
names(group_filter)
group_filter=setNames(c('all',group[,1]),c('all',group[,4]))
hbm@output[,i]=sapply(filterout[,i],\(x)group_filter[x])
unique(hbm@output[,i])
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species))
bass(o1,'mass','species')
o1@filter
hbm=o1
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
filterout=pastedown(hbm@output,hbm@vars[[2]][-1])
filter=cbind(hbm@filter,pastedown(hbm@filter[(-2*length(hbm@vars[[2]][-1])):0],hbm@vars[[2]][-1]))
unique(names(hbm@filter))
i='site'
filterout[,i][hbm@output[,i]=='all']='all'
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,4]))
group_filter
group
group[,1]
group[,4]
group_filter=setNames(c('all',group[,1]),c('all',group[,4]))
group_filter
summary(filter)
group_filter=setNames(c('all',as.character(group[,1])),c('all',group[,4]))
group_filter
o1=hbm(mix,length~mass+sex+(site+species))
bass(o1,'mass','species')
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species))
bass(o1,'mass','species')
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species))
bass(o1,'mass','species')
ocean(o1,'mass','species')
