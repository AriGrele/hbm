fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=var$var[1]),size=1.5*s)+
facet_grid(reformulate(var$var[2]))
return(list(out))}
ocean(o,'mass','species')[[1]]
bass(o,'mass','species')[[1]]
#interaction
o=hbm(data,length~mass:sex+(site))
summary(o)
ocean(o,'mass','site')[[1]]
data$sex=as.numeric(data$sex)
model='mass~length+sex
length~sex'
b=semb(data,model)
#################################################################################
semb=function(data,model,...){                                                   #write and compute Bayesian structural equation models, takes arguments of model string, data, directory to save to
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_semb',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
rows=str_split(model,'\n')[[1]]
row=c();lefts=c();rights=c();old=c()
for(r in 1:length(rows)){
item=c(LETTERS,letters)[r]
rights=c(rights,paste(item,'[1]',sep=''))
groups=str_split(rows[r],'~')[[1]]
left=paste(groups[1],'[i]',sep='')
lefts=c(lefts,left)
old=c(old,groups[1])
Right=str_split(groups[2],'\\+')[[1]]
new=c(paste(item,'[1]',sep=''))
for(i in 1:length(Right)){
old=c(old,Right[i])
new=c(new,paste(item,'[',i+1,']*y.',Right[i],'[i]',sep=''))
rights=c(rights,paste(item,'[',i+1,']',sep=''))}
right=paste(new,collapse=' + ')
row=c(row,paste(left,right,sep=' = '))}
row=paste(row,collapse='\n')
upper=paste('model {\nfor (i in 1:N){',row,'}',sep='\n')
new=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',lefts[l],'~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.sim[i]~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.res[i]=y.',lefts[l],'-',lefts[l],sep=''),
paste('y.',base,'.sres[i]=y.',base,'.sim[i]-',lefts[l],sep=''))}
row=paste(new,collapse='\n')
middle=paste('for (i in 1:N){',row,'}',sep='\n')
new=c()
for(r in rights){new=c(new,paste(r,'dnorm(0.0,0.01)',sep=' ~ '))}
lower=paste(new,collapse='\n')
bottom=paste('for (j in 1:',
length(lefts),
'){\nsigma[j] ~ dgamma(1,1)\ntau[j] <- pow(sigma[j], -2)\n}\n}',
sep='')
new=c();parameters=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',
base,'.fit=sum(pow(y.',base,'.res[],2)/tau[',l,'])',sep=''),
paste('y.',
base,'.sfit=sum(pow(y.',base,'.sres[],2)/tau[',l,'])',sep=''))
parameters=c(parameters,
paste('y.',base,'.sfit',sep=''),
paste('y.',base,'.fit',sep=''))}
tail=paste(new,collapse='\n')
formula=paste(upper,middle,lower,tail,bottom,sep='\n')
sink(paste0(output@dir,'/',output@name,'.jags'))
cat(formula,fill=T)
sink()
output@model_data=list('N'=nrow(output@data))
for(o in unique(old)){output@model_data=c(output@model_data,
setNames(list(output@data[,o]),
paste('y.',o,sep='')))}
inits=function(){list(sigma=rep(1,length(lefts)))}
parameters=c(parameters,c(LETTERS,letters)[1:length(lefts)])
output@jags_model=tryCatch(jags(output@model_data,
inits,
parameters,
paste0(output@dir,'/',output@name,'.jags'),
n.chains=output@n.chains,
n.thin=output@n.thin,
n.iter=output@n.iter,
n.burnin=output@n.burnin,
parallel=F),
error=function(e){print(e);return(NULL)})
cat('\nMaking trace plots\n')
traces(output)
return(output)}
b=semb(data,model)
#################################################################################
semb=function(data,model,...){                                                   #write and compute Bayesian structural equation models, takes arguments of model string, data, directory to save to
output=new('semb_object')
param=list(...)
defaults=list('name'        ='unnamed_semb',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
rows=str_split(model,'\n')[[1]]
row=c();lefts=c();rights=c();old=c()
for(r in 1:length(rows)){
item=c(LETTERS,letters)[r]
rights=c(rights,paste(item,'[1]',sep=''))
groups=str_split(rows[r],'~')[[1]]
left=paste(groups[1],'[i]',sep='')
lefts=c(lefts,left)
old=c(old,groups[1])
Right=str_split(groups[2],'\\+')[[1]]
new=c(paste(item,'[1]',sep=''))
for(i in 1:length(Right)){
old=c(old,Right[i])
new=c(new,paste(item,'[',i+1,']*y.',Right[i],'[i]',sep=''))
rights=c(rights,paste(item,'[',i+1,']',sep=''))}
right=paste(new,collapse=' + ')
row=c(row,paste(left,right,sep=' = '))}
row=paste(row,collapse='\n')
upper=paste('model {\nfor (i in 1:N){',row,'}',sep='\n')
new=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',lefts[l],'~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.sim[i]~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.res[i]=y.',lefts[l],'-',lefts[l],sep=''),
paste('y.',base,'.sres[i]=y.',base,'.sim[i]-',lefts[l],sep=''))}
row=paste(new,collapse='\n')
middle=paste('for (i in 1:N){',row,'}',sep='\n')
new=c()
for(r in rights){new=c(new,paste(r,'dnorm(0.0,0.01)',sep=' ~ '))}
lower=paste(new,collapse='\n')
bottom=paste('for (j in 1:',
length(lefts),
'){\nsigma[j] ~ dgamma(1,1)\ntau[j] <- pow(sigma[j], -2)\n}\n}',
sep='')
new=c();parameters=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',
base,'.fit=sum(pow(y.',base,'.res[],2)/tau[',l,'])',sep=''),
paste('y.',
base,'.sfit=sum(pow(y.',base,'.sres[],2)/tau[',l,'])',sep=''))
parameters=c(parameters,
paste('y.',base,'.sfit',sep=''),
paste('y.',base,'.fit',sep=''))}
tail=paste(new,collapse='\n')
formula=paste(upper,middle,lower,tail,bottom,sep='\n')
sink(paste0(output@dir,'/',output@name,'.jags'))
cat(formula,fill=T)
sink()
output@model_data=list('N'=nrow(output@data))
for(o in unique(old)){output@model_data=c(output@model_data,
setNames(list(output@data[,o]),
paste('y.',o,sep='')))}
inits=function(){list(sigma=rep(1,length(lefts)))}
parameters=c(parameters,c(LETTERS,letters)[1:length(lefts)])
output@jags_model=tryCatch(jags(output@model_data,
inits,
parameters,
paste0(output@dir,'/',output@name,'.jags'),
n.chains=output@n.chains,
n.thin=output@n.thin,
n.iter=output@n.iter,
n.burnin=output@n.burnin,
parallel=F),
error=function(e){print(e);return(NULL)})
cat('\nMaking trace plots\n')
traces(output)
return(output)}
b=semb(data,model)
summary(o)
o@source_model
o@input
o@vars
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'&data[,var$var[2]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[2]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=int),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction!='none'){out[[g]]=wave2(h,v,s)}
else{out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site')[[1]]
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
print(int)
data=subset(data,!(data[,var$var[1]]=='all'&data[,var$var[2]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[2]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=int),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{print(interaction);out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{print(interaction);out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
ocean(o,'mass','site',interaction='sex')[[1]]
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{print(interaction);out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction)
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){print('mooose');out[[g]]=wave2(h,v,s)}
else{out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{if(interaction=='none'){out[[g]]=wave2(h,v,s)}
else{print('mooose');out[[g]]=wave3(h,v,s,interaction)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction=='none'){out[[g]]=wave3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{out[[g]]=wave2(h,v,s)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=wave3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{out[[g]]=wave2(h,v,s)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[2]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=int),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
rlang::last_error()
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=int),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
rlang::last_error()
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
summary(o)
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interaction=regexpr(int,data$lower)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=interaction),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
summary(o)
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=regexpr(int,data$lower)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=regexpr(int,data$lower)
print(data)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=regexpr(int,data$lower)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..count..',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
