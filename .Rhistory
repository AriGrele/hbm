ggplot(data,aes(x=offspring,color=site))+geom_density(),
ggplot(data,aes(x=survival,color=site))+geom_density(bw=.01),ncol=3)
mix$species[mix$site=='A']=c('fish','moose')
mix$species[mix$site=='B']=c('s1','s4')
ggplot(mix,aes(x=mass,y=length,color=species))+
geom_point()+
geom_smooth(method=lm)+
facet_grid(cols=vars(site))
set.seed(1)
source('hbm.R')
o1=hbm(mix,length~mass+sex+(site+species+sex))
o1
o1=hbm(mix,length~mass+(site+species+sex))
hbm=o1
q=3
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
loop
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
if(hbm@format=='difference'){formfilter=1:length(rv[[2]])}
else{formfilter=length(rv[[2]])}
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1
right=c(right,str_interp("(${paste(paste(q[formfilter],collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q[formfilter],collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn[formfilter],collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
loop
types
lines
paste('[',letters[1:(q-1)],']',sep='')
paste(paste('[',letters[1:(q-1)],']',sep=''),collapse='')
paste(paste('[',letters[1:q],']',sep=''),collapse='')
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
set.seed(1)
source('hbm.R')
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[paste(paste("[",letters[1:(q-1)],"]",sep=""),collapse="")]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
hbm=o1
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
if(hbm@format=='difference'){formfilter=1:length(rv[[2]])}
else{formfilter=length(rv[[2]])}
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1
right=c(right,str_interp("(${paste(paste(q[formfilter],collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q[formfilter],collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn[formfilter],collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[paste(paste("[",letters[1:(q-1)],"]",sep=""),collapse="")]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
loop
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
format_data(o1)
hbm=o1
hbm@model_data=list('N'=nrow(hbm@data))
hbm@model_data[as.character(hbm@input$model)[2]]=
list(hbm@data[,as.character(hbm@input$model)[2]])
full_names=c()
for(n in hbm@variables){full_names=c(full_names,strsplit(n,':')[[1]])}
hbm@variables=unique(full_names)
for(n in unique(c(hbm@vars[[1]],hbm@variables))){
if(!is.numeric(hbm@data[,n])){
hbm@model_data[n]=list(as.numeric(as.factor(hbm@data[,n])))}
else{hbm@model_data[n]=list(hbm@data[,n])}}
convert=list()
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[1:length(hbm@vars[[2]][-1])]=
pastedown(hbm@filter[1:length(hbm@vars[[2]][-1])],hbm@vars[[2]][-1])
hbm@data=pastedown(hbm@data,hbm@vars[[2]][-1])
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=list(counts)}}
hbm@vars[[2]]
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
cols
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
i
(nc/2+1):nc
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
hbm@vars[[2]][-1][1:(i-nc/2)]
ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
#################################################################################
ilen=function(data,v,x=1){                                                      #returns counts of factors in each level of hierarchy, take argument of data.frame, vector of col names
o=list()                                                                         #define var
d=as.numeric(as.factor(data[,v[x]]))                                          #characters to numbers
if(x==length(v)){return(length(unique(d)))}                                   #return on final value
else{for(i in unique(d)){o[[i]]=(ilen(data[d==i,],v,x+1))};return(o)}}          #otherwise repeat for sub-hierarchies
ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
list(list())
list(list())[[1]]
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)])
counts
expand(counts)
unique(cols[,i])
unlist(count)
unlist(counts)
counts=unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
i=4
unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
i=5
unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
i=6
unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
o1@model_data$Nsites
o1@model_data$Nsite
o1@model_data$Nspecies
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
o1@model_data$Nsex
o1@model_data$Nspecies
o1@model_data$Nsite
hbm=o1
hbm@model_data=list('N'=nrow(hbm@data))
hbm@model_data[as.character(hbm@input$model)[2]]=
list(hbm@data[,as.character(hbm@input$model)[2]])
full_names=c()
for(n in hbm@variables){full_names=c(full_names,strsplit(n,':')[[1]])}
hbm@variables=unique(full_names)
for(n in unique(c(hbm@vars[[1]],hbm@variables))){
if(!is.numeric(hbm@data[,n])){
hbm@model_data[n]=list(as.numeric(as.factor(hbm@data[,n])))}
else{hbm@model_data[n]=list(hbm@data[,n])}}
convert=list()
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[1:length(hbm@vars[[2]][-1])]=
pastedown(hbm@filter[1:length(hbm@vars[[2]][-1])],hbm@vars[[2]][-1])
hbm@data=pastedown(hbm@data,hbm@vars[[2]][-1])
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=counts}}
hbm@scales=list()
counts
counts
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
o1@model_data$Nspecies
matrix(o1@model_data$Nspecies)
matrix(o1@model_data$Nsex)
?simplify2array
counts
as.matrix(counts)
as.matrix(counts)[1,1,1]
array(counts)[1,1,1]
array(counts)
as.array(counts)
as.array(counts)[[1,2,3]]
as.array(counts)[[1]]
as.array(counts)[[1]][[1]]
as.array(counts)[1,1]
as.array(counts)[[1,1]]
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
summary(o1@model_data)
class(as.array(counts))
hbm=o1
hbm@model_data=list('N'=nrow(hbm@data))
hbm@model_data[as.character(hbm@input$model)[2]]=
list(hbm@data[,as.character(hbm@input$model)[2]])
full_names=c()
for(n in hbm@variables){full_names=c(full_names,strsplit(n,':')[[1]])}
hbm@variables=unique(full_names)
for(n in unique(c(hbm@vars[[1]],hbm@variables))){
if(!is.numeric(hbm@data[,n])){
hbm@model_data[n]=list(as.numeric(as.factor(hbm@data[,n])))}
else{hbm@model_data[n]=list(hbm@data[,n])}}
convert=list()
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[1:length(hbm@vars[[2]][-1])]=
pastedown(hbm@filter[1:length(hbm@vars[[2]][-1])],hbm@vars[[2]][-1])
hbm@data=pastedown(hbm@data,hbm@vars[[2]][-1])
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[[paste('N',hbm@vars[[2]][n],sep='')]]=as.array(counts)}}
hbm@scales=list()
for(m in hbm@variables){
if(length(hbm@model_data[[m]])>1&!(m%in%hbm@vars[[2]])){
if(hbm@dist%in%c('dbern')&m==hbm@variables[1]){m='scale_error'}
if(regexpr('error',m)<0){
hbm@scales[[m]]=attributes(scale(hbm@model_data[[m]],center=F))$scale
hbm@model_data[[m]]=as.numeric(scale(hbm@model_data[[m]],center=F))
}
else{
m=gsub('scale_error',hbm@variables[1],m)
hbm@scales[[m]]=1
hbm@model_data[[m]]=as.numeric(hbm@model_data[[m]])}}}
summary(hbm@model_data)
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=as.array(counts)}}
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=as.array(counts)
as.array(counts)
paste('N',hbm@vars[[2]][n],sep='')
hbm@model_data
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[[paste('N',hbm@vars[[2]][n],sep='')]]=list(as.array(counts))}}
if(length(hbm@vars[[2]])>1){
cols=unique(hbm@data[hbm@vars[[2]][-1]])
cols=cbind(cols,pastedown(cols,hbm@vars[[2]][-1]))
nc=ncol(cols)
for(i in (nc/2+1):nc){
cols[,i]=as.numeric(as.factor(cols[,i]))
cols=cols[order(cols[,i]),]
counts=unlist(ilen(hbm@data,hbm@vars[[2]][-1][1:(i-nc/2)]))
rename=expand(counts)|>setNames(unique(cols[,i]))
cols=cbind(cols,sapply(cols[,i],\(x)rename[x]))
}
hbm@filter=setNames(cols,rep(hbm@vars[[2]][-1],3))
hbm@filter[1:length(hbm@vars[[2]][-1])]=
pastedown(hbm@filter[1:length(hbm@vars[[2]][-1])],hbm@vars[[2]][-1])
hbm@data=pastedown(hbm@data,hbm@vars[[2]][-1])
for(n in hbm@vars[[2]][-1]){
filter=hbm@filter[regexpr(n,names(hbm@filter))>0]
filter=setNames(filter[,3],as.character(filter[,1]))
hbm@model_data[[n]]=sapply(hbm@data[,n],\(x)filter[as.character(x)])}
for(n in 2:length(hbm@vars[[2]])){
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
counts=ilen(hbm@data,hbm@vars[[2]][2:n])
hbm@model_data[[paste('N',hbm@vars[[2]][n],sep='')]]=list(as.array(counts))}}
summary(hbm@model_data)
hbm@model_data
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
source('hbm.R')
o1=hbm(mix,length~mass+(site+species+sex))
o1=hbm(mix,length~mass+(site+species+sex),source_model='test')
o1=hbm(mix,length~mass+(site+species+sex),source_model='test')
