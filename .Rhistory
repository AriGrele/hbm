rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2)/tau)'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2)/tau)')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,'/',hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)})
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model==''){
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})}
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
traces(output,cull=9)
write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F)
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
#################################################################################
wave=function(data,var,s){                                                      #create single distribution plots, takes argument of model output, focal variables, scale
g=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=var$var[1]),size=1.5*s)
return(list(g))}
wave2=function(data,var,s){                                                     #create multi-distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'&data[,var$var[2]]=='all'))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[2]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',color=var$var[1]),size=1.5*s)+
facet_grid(reformulate(var$var[2]))
return(list(out))}
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,!(data[,var$var[1]]=='all'))
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
print(interaction=='none')
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=wave3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{out[[g]]=wave2(h,v,s)}}}}
return(unlist(out, recursive = FALSE))})
#################################################################################
dotplot=function(data,var,s){                                                   #create single dotplot, takes argument of model output, focal variables, scale
df=setNames(as.data.frame(matrix(ncol=4)),c('variable','y2.5','y97.5','y50'))
for(i in unique(data[,var$var[1]])){
q=data$response[data[,var$var[1]]==i]
df=rbind(df,data.frame('variable'=i,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),'y50'=quantile(q,.5)))}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,
aes(x=as.factor(variable),ymin = y2.5, lower = y2.5,
middle = y50, upper = y97.5, ymax = y97.5),
stat = "identity",fill='black')+
geom_point(data=na.omit(df),aes(x=as.factor(variable),y=y50),size=5*s)
return(g)}
dotplot2=function(data,var,s){                                                  #create multi-dotplots (new version), takes argument of model output, focal variables, scale
df=setNames(as.data.frame(matrix(ncol=5)),
c(var$var[2],'v2','y2.5','y97.5','y50'))
for(i in unique(data[,var$var[2]])){
for(j in unique(data[,var$var[1]])){
q=data$response[data[,var$var[2]]==i&data[,var$var[1]]==j]
df=rbind(df,setNames(data.frame('v'=i,'v2'=j,
'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),
'y50'=quantile(q,.5)),
c(var$var[2],'v2','y2.5','y97.5','y50')))}}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
facet_grid(reformulate(var$var[2]))+
geom_boxplot(data=na.omit(df),
width=.05*s,lwd=s,position = position_dodge(.9),
aes(x=as.factor(v2),group=as.factor(v2),
ymin = y2.5, lower = y2.5, middle = y50,
upper = y97.5, ymax = y97.5),
stat = "identity",fill='black')+
geom_point(data=na.omit(df),aes(x=as.factor(v2),
group=as.factor(v2),y=y50),size=5*s)
return(g)}
setGeneric("polka", function(hbm,...) standardGeneric("polka"))
setMethod("polka","hbm_object",function(hbm,vars,fill='lower',s=1){             #create groups of dotplots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=dotplot(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=dotplot(h,v,s)}
else{out[[g]]=dotplot2(h,v,s)}}}
return(out)})
#################################################################################
setGeneric("hbmgroup", function(hbm,...) standardGeneric("hbmgroup"))
setMethod("hbmgroup","hbm_object",function(hbm,groups){                         #Selects specific subsets of data based on focal group, takes arguments of model output, focal groups
v=hbm@vars[[2]]
out=setNames(as.data.frame(matrix(ncol=length(hbm@output))),names(hbm@output))
for(g in groups){
if(!(g %in% v)){out=rbind(out,hbm@output[regexpr(g,hbm@output$lower)>0,])}
else{out=rbind(out,hbm@output[regexpr('all',hbm@output[,g])>0,])}}
for(g in groups){
if(!(g %in% v)){out=out[regexpr(g,out$lower)>0,]}
else{out=out[regexpr('all',out[,g])>0,]}}
return(na.omit(out))})
hbmvar=function(data,groups){                                                   #selects specific variable names based on focal groups, takes arguments of model output, focal groups
n=names(data)
filter=c()
for(g in groups){
if(g %in% n){
if(match(g,n)==1){Var=c(g)}
else{Var=c(g,n[match(g,n)-1])}}
else{filter=c(filter,g)}}
return(list('var'=Var,'filter'=filter))}
mgroup=function(data,groups){                                                   #creates data groupings based on focal group names, takes arguments of model output, focal groups
k=0
for(g in groups){
if(k==0){h=hbmgroup(data,c(g));k=1}
else{h=rbind(h,hbmgroup(data,c(g)))}}
return(h)}
#################################################################################
cello=function(data,var,s,label='none',lsize=1){                                #create single violin plot with CI bars, takes argument of model output, focal variables, scale
df=setNames(as.data.frame(matrix(ncol=5)),c('variable','y2.5','y97.5','y50','lab'))
for(i in unique(data[,var$var[1]])){
q=data$response[data[,var$var[1]]==i]
df=rbind(df,data.frame('variable'=i,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),'y50'=quantile(q,.5),
'lab'=paste0(sign(median(q))*round(100*pd(q),1),'%')))}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
geom_violin(aes_string(x=var$var[1],y='response',
fill=var$var[1]),size=s,scale='width')+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,
aes(x=as.factor(variable),
ymin = y2.5, lower = y2.5, middle = y50,
upper = y97.5, ymax = y97.5),stat = "identity")
if(label!='none'){g=g+geom_text(data=na.omit(df),aes(label=lab,
x=as.factor(variable),
y=label),size=lsize)}
return(g)}
cello2=function(data,var,s){                                                    #create multi-violin plots with CI bars, takes argument of model output, focal variables, scale
df=setNames(as.data.frame(matrix(ncol=5)),
c(var$var[2],'v2','y2.5','y97.5','y50'))
for(i in unique(data[,var$var[2]])){
for(j in unique(data[,var$var[1]])){
q=data$response[data[,var$var[2]]==i&data[,var$var[1]]==j]
df=rbind(df,setNames(data.frame('v'=i,'v2'=j,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),
'y50'=quantile(q,.5)),
c(var$var[2],'v2','y2.5','y97.5','y50')))}}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
facet_grid(reformulate(var$var[2]))+
geom_violin(aes_string(x=var$var[1],y='response',
fill=var$var[1]),size=s,scale='width')+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,position=position_dodge(.9),
aes(x=as.factor(v2),group=as.factor(v2),
ymin = y2.5, lower = y2.5, middle = y50,
upper = y97.5, ymax = y97.5),stat = "identity")
return(g)}
setGeneric("bass", function(hbm,...) standardGeneric("bass"))
setMethod("bass","hbm_object",function(hbm,groups,fill='lower',s=1,label='none',lsize=1){               #create groups cello plots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in groups){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(length(v$var)==1){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{if(v$var[2]=='upper'){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{out[[g]]=cello2(h,v,s)}}}
return(out)})
#################################################################################
clamp=function(x,minimum,maximum){return(ifelse(x<minimum,minimum,ifelse(x>maximum,maximum,x)))}
randseq=function(x,size){out=c();for(i in 1:size){out=c(out,sample(x,1))};return(out)}
fixedmean=function(n,m,d){
out=c(rnorm(n-1,m,d))
return(c(out,(m-sum(out)/n)*n))}
# x => list(distrubition, mean, sd or other parameter)
# y => list(x,alpha,slope)
# g => list(groups,sd)
mixed=function(n,params){
data=setNames(as.data.frame(matrix(ncol=length(names(params)),nrow=n)),names(params))
rslope=list();ralpha=list()
resp=names(params)[sapply(names(params),\(x)length(params[[x]])>=3&is.character(params[[x]][[1]]))]
for(p in setdiff(names(params),resp)){
if(length(params[[p]])==2){
data[p]=randseq(params[[p]][[1]],n)
rslope[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[3]],params[[p]][[2]]),params[[p]][[1]])
ralpha[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[2]],params[[p]][[2]]),params[[p]][[1]])}}
for(p in setdiff(names(params),names(rslope))){
if(length(params[[p]])>=3){
if(is.function(params[[p]][[1]])){data[p]=params[[p]][[1]](n,params[[p]][[2]],params[[p]][[3]])}
else{
slope=rep(1/(mean(rslope[[1]])^(length(rslope)-1)),n)
alpha=rep(0,n)
for(i in names(rslope)){
slope=slope*rslope[[i]][data[,i]]
alpha=alpha+ralpha[[i]][data[,i]]/length(names(ralpha))}
data[p]=data[params[[p]][[1]]]*slope+alpha+rnorm(n,0,params[[p]][[2]])}}}
return(list(data,ralpha,rslope))}
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
ggplot(data,aes(x=mass,y=abs(length),color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(site),rows=vars(species))+
theme_classic()
#single level
o=hbm(rbind(data,data),length~mass+(site))
summary(o)
ocean(o,'mass','site')[[1]]
polka(o,'mass','site')[[1]]
bass(o,'mass','site')[[1]]
#multiple levels
o=hbm(data,length~mass+(site+species))
summary(o)
ocean(o,'mass','species')[[1]]
polka(o,'mass','species')[[1]]
bass(o,'mass','species')[[1]]
#interaction
o=hbm(data,length~mass:sex+(site))
summary(o)
ocean(o,'mass','site',interaction='sex')[[1]]
#
# data$sex=as.numeric(data$sex)
# model='mass~length+sex
# length~sex'
# b=semb(data,model)
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color='interact'),size=1.5*s)+
facet_grid(reformulate(var$var[1]))
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
print(unique(data[-4]))
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color=var$var[1]),size=1.5*s)
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='Difference in slopes',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color=var$var[1]),size=1.5*s)
return(list(out))}
setGeneric("ocean", function(hbm,...) standardGeneric("ocean"))
setMethod("ocean","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of waveplots, takes arguments of model output, focal groups, fill groups, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=wave3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=wave(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=wave(h,v,s)}
else{out[[g]]=wave2(h,v,s)}}}}
return(unlist(out, recursive = FALSE))})
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color=var$var[1]),size=1.5*s)+
xlab('Difference in slopes')
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
wave3=function(data,var,s,int){                                                     #create interaction + distribution plots, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
out=ggplot()+
geom_vline(xintercept = 0,size=2*s,linetype='dashed')+
geom_density(data=data[data[,var$var[1]]=='all',],
aes_string(x='response',y='..scaled..',group=var$var[1]),size=1.5*s,
fill='black',color='black',alpha=.5)+
geom_density(data=data[data[,var$var[1]]!='all',],
aes_string(x='response',y='..scaled..',color=var$var[1]),size=1.5*s)+
xlab('Difference in slopes')
return(list(out))}
ocean(o,'mass','site',interaction='sex')[[1]]
dotplot3=function(data,var,s,int){                                                   #create single dotplot, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
df=setNames(as.data.frame(matrix(ncol=4)),c('variable','y2.5','y97.5','y50'))
for(i in unique(data[,var$var[1]])){
q=data$response[data[,var$var[1]]==i]
df=rbind(df,data.frame('variable'=i,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),'y50'=quantile(q,.5)))}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,
aes(x=as.factor(variable),ymin = y2.5, lower = y2.5,
middle = y50, upper = y97.5, ymax = y97.5),
stat = "identity",fill='black')+
geom_point(data=na.omit(df),aes(x=as.factor(variable),y=y50),size=5*s)
return(g)}
setGeneric("polka", function(hbm,...) standardGeneric("polka"))
setMethod("polka","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of dotplots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=wave3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=dotplot(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=dotplot(h,v,s)}
else{out[[g]]=dotplot2(h,v,s)}}}}
return(out)})
polka(o,'mass','site',interaction='sex')[[1]]
setGeneric("polka", function(hbm,...) standardGeneric("polka"))
setMethod("polka","hbm_object",function(hbm,vars,fill='lower',s=1,interaction='none'){             #create groups of dotplots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in vars){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=dotplot3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=dotplot(h,v,s)}
else{if(v$var[2]=='upper'){out[[g]]=dotplot(h,v,s)}
else{out[[g]]=dotplot2(h,v,s)}}}}
return(out)})
polka(o,'mass','site',interaction='sex')[[1]]
cello3=function(data,var,s,label='none',lsize=1){                                #create single violin plot with CI bars, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
df=setNames(as.data.frame(matrix(ncol=5)),c('variable','y2.5','y97.5','y50','lab'))
for(i in unique(data[,var$var[1]])){
q=data$response[data[,var$var[1]]==i]
df=rbind(df,data.frame('variable'=i,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),'y50'=quantile(q,.5),
'lab'=paste0(sign(median(q))*round(100*pd(q),1),'%')))}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
geom_violin(aes_string(x=var$var[1],y='response',
fill=var$var[1]),size=s,scale='width')+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,
aes(x=as.factor(variable),
ymin = y2.5, lower = y2.5, middle = y50,
upper = y97.5, ymax = y97.5),stat = "identity")
if(label!='none'){g=g+geom_text(data=na.omit(df),aes(label=lab,
x=as.factor(variable),
y=label),size=lsize)}
return(g)}
setGeneric("bass", function(hbm,...) standardGeneric("bass"))
setMethod("bass","hbm_object",function(hbm,groups,fill='lower',s=1,label='none',lsize=1,interaction='none'){               #create groups cello plots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in groups){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=cello3(h,v,s,interaction)}
else{if(length(v$var)==1){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{if(v$var[2]=='upper'){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{out[[g]]=cello2(h,v,s)}}}}
return(out)})
bass(o,'mass','site',interaction='sex')[[1]]
cello3=function(data,var,s,label='none',lsize=1,int){                                #create single violin plot with CI bars, takes argument of model output, focal variables, scale
data=subset(data,regexpr(int,lower)>0)
data$interact=as.factor(regexpr(int,data$lower)>0)
df=setNames(as.data.frame(matrix(ncol=5)),c('variable','y2.5','y97.5','y50','lab'))
for(i in unique(data[,var$var[1]])){
q=data$response[data[,var$var[1]]==i]
df=rbind(df,data.frame('variable'=i,'y2.5'=quantile(q,0.05),
'y97.5'=quantile(q,0.95),'y50'=quantile(q,.5),
'lab'=paste0(sign(median(q))*round(100*pd(q),1),'%')))}
g=ggplot(data)+
geom_hline(yintercept=0,size=2*s)+
geom_violin(aes_string(x=var$var[1],y='response',
fill=var$var[1]),size=s,scale='width')+
geom_boxplot(data=na.omit(df),width=.05*s,lwd=s,
aes(x=as.factor(variable),
ymin = y2.5, lower = y2.5, middle = y50,
upper = y97.5, ymax = y97.5),stat = "identity")
if(label!='none'){g=g+geom_text(data=na.omit(df),aes(label=lab,
x=as.factor(variable),
y=label),size=lsize)}
return(g)}
bass(o,'mass','site',interaction='sex')[[1]]
setGeneric("bass", function(hbm,...) standardGeneric("bass"))
setMethod("bass","hbm_object",function(hbm,groups,fill='lower',s=1,label='none',lsize=1,interaction='none'){               #create groups cello plots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in groups){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=cello3(h,v,s,label=label,lsize=lsize,int=interaction)}
else{if(length(v$var)==1){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{if(v$var[2]=='upper'){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{out[[g]]=cello2(h,v,s)}}}}
return(out)})
bass(o,'mass','site',interaction='sex')[[1]]
