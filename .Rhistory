rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn,collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(right,collapse='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2))'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2))')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,'/',hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)})
o1=hbm(data,length~mass+(site),dist='dnorm')
o1@formula
#################################################################################
setGeneric("write_model", function(hbm) standardGeneric("write_model"))
setMethod("write_model","hbm_object",function(hbm){
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
hbm@vars=strsplit(as.character(hbm@input$model)[3],'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1;right=c(right,str_interp("(${paste(paste(q,collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q,collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn,collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2))'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2))')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,'/',hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)})
o1=hbm(data,length~mass+(site),dist='dnorm')
o1@formula
sumary(o1)
summary(o1)
o1@model_data
library(reshape2)
s=summary(o1)
s
s[c('lower','mean')]
dcast(s[c('lower','mean')])
?dcast
dcast(s[c('lower','mean')],lower~mean)
dcast(s[c('lower','mean')],mean~lower)
as.data.frame(s$mean|>setNames(s$lower))
s$mean|>setNames(s$lower)|>as.data.frame()
s$mean|>setNames(s$lower)
s$mean|>setNames(s$lower)|>attach()
s$mean|>setNames(s$lower)|>as.list()
s$mean|>setNames(s$lower)|>as.list()|>attach()
beta_mass
s=s$mean|>setNames(s$lower)|>as.list()
beta_mass
detach(s)
s=s$mean|>setNames(s$lower)|>as.list()
attach(s)
beta_mass
detach(s)
beta_mass
detach()
beta_mass
s$mean|>setNames(s$lower)|>as.list()|>attach()
beta_mass
detach()
s$mean|>setNames(s$lower)|>as.list()|>attach()
beta_mass
detach()
s$mean|>setNames(s$lower)|>as.list()|>attach()
beta_mass
s$mean|>setNames(s$lower)|>as.list()
s=summary(o1)
s$mean|>setNames(s$lower)|>as.list()|>attach()
beta_mass
detach()
beta_mass
attach(data)
o1@formula
?eval
for(i in 1:o1@model_data$N){x=eval(parse(text=o1@formula))}
s=summary(o1)
s$mean|>
setNames(s$lower)|>
as.list()|>
attach()
attach(data)
for(i in 1:o1@model_data$N){x=eval(parse(text=o1@formula))}
x
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
x
o1@formula
s$mean|>
setNames(s$lower)|>
as.list()|>
attach()
detach()
s=summary(o1)
s$mean|>
setNames(s$lower)|>
as.list()
s$mean|>
setNames(s$lower)|>
as.list()|>
attach()
for(n in s$lower){print(n)}
vars=list()
s=summary(o1)
vars=list()
for(i in nrow(s)){
n=s$lower[i]
if(n%in%names(vars)){vars[[n]]=c(vars[[n]],s$mean[i])}
else{vars[[n]]=s$mean[i]}}
attach(data);attach(vars)
vars
detach()
vars=list()
for(i in nrow(s)){
n=s$lower[i]
if(n%in%names(vars)){vars[[n]]=c(vars[[n]],s$mean[i])}
else{vars[[n]]=s$mean[i]}}
vars
for(i in 1:nrow(s)){
n=s$lower[i]
if(n%in%names(vars)){vars[[n]]=c(vars[[n]],s$mean[i])}
else{vars[[n]]=s$mean[i]}}
vars
s=summary(o1)
vars=list()
for(i in 1:nrow(s)){
n=s$lower[i]
if(n%in%names(vars)){vars[[n]]=c(vars[[n]],s$mean[i])}
else{vars[[n]]=s$mean[i]}}
attach(data);attach(vars)
vars
vars
beta_mass
alpha_site
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
x
site
o1@filter
rdata=data
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,2]))
rdata[,i]=sapply(rdata[,i],\(x)group_filter[x])}
detach()
attach(rdata);attach(vars)
site
group_filter
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,2]))
rdata[,i]=sapply(rdata[,i],\(x)group_filter[x])}
group_filter
for(i in unique(names(o1@filter))){
group=unique(o1@filter[,regexpr(i,unique(names(o1@filter)))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,2]))
rdata[,i]=sapply(rdata[,i],\(x)group_filter[x])}
group_filter
detach()
attach(rdata);attach(vars)
s
site
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
x
eval(parse(text=o1@formula))
o1@formula
alpha+alpha_site[site[i]]+(beta_mass+beta_mass_site[site[i]])*mass[i]
alpha
i
alpha_site[site[i]]
site[i]
rdata=data
for(i in unique(names(o1@filter))){
group=unique(o1@filter[,regexpr(i,unique(names(o1@filter)))>0])
group_filter=setNames(c('all',as.numeric(group[,1])),c('all',group[,2]))
rdata[,i]=sapply(rdata[,i],\(x)group_filter[x])}
detach()
attach(rdata);attach(vars)
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
x
site[i]
site
rdata=data
for(i in unique(names(o1@filter))){
group=unique(o1@filter[,regexpr(i,unique(names(o1@filter)))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,2]))
rdata[,i]=as.numeric(as.character(sapply(rdata[,i],\(x)group_filter[x])))}
attach(rdata);attach(vars)
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
o1@formula
x
rdata$predicted=x
detach()
ggplot(rdata,aes(x=mass,y=predicted))+geom_point()
ggplot(rdata,aes(x=mass,y=length))+geom_point()
ggplot(rdata,aes(x=mass,y=length-predicted))+geom_point()
ggplot(rdata,aes(x=mass))+
geom_point(aes(y=length))+
geom_point(aes(y=predicted),color='red')
s=summary(o1)
vars=list()
for(i in 1:nrow(s)){
n=s$lower[i]
if(n%in%names(vars)){vars[[n]]=c(vars[[n]],s$mean[i])}
else{vars[[n]]=s$mean[i]}}
rdata=data
for(i in unique(names(o1@filter))){
group=unique(o1@filter[,regexpr(i,unique(names(o1@filter)))>0])
group_filter=setNames(c('all',group[,1]),c('all',group[,2]))
rdata[,i]=as.numeric(as.character(sapply(rdata[,i],\(x)group_filter[x])))}
attach(rdata);attach(vars)
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
alpha
alpha_site
o1@jags_model
j=o1@jags_model
j$mean
vars=o1@jags_model$mean
attach(o1@model_data);attach(o1@jags_model$mean)
x=c()
for(i in 1:o1@model_data$N){x=c(x,eval(parse(text=o1@formula)))}
o1@model_data$predicted=x
detach()
ggplot(o1@model_data,aes(x=mass))+
geom_point(aes(y=length))+
geom_point(aes(y=predicted),color='red')
o1@model_data
ggplot(as.data.frame(o1@model_data),aes(x=mass))+
geom_point(aes(y=length))+
geom_point(aes(y=predicted),color='red')
ggplot(as.data.frame(o1@model_data),aes(x=mass))+geom_point(aes(y=length-predicted))
ggplot(as.data.frame(o1@model_data),aes(x=mass))+geom_density(aes(x=length-predicted))
o1@variables
#################################################################################
setMethod("resid","hbm_object",function(object){
sims=object@jags_model$sims.list
n=names(sims)
data=sims[n[regexpr('\\.s?fit$',n)>0]]|>
as.data.frame()|>
setNames(c('simulated','observed'))
attach(object@model_data);attach(object@jags_model$mean)
x=c()
for(i in 1:object@model_data$N){x=c(x,eval(parse(text=object@formula)))}
object@model_data$predicted=x
detach()
g1=ggplot(as.data.frame(object@model_data),
aes_string(x=object@variables[1]-'predicted'))+
geom_density()
g2=ggplot(data)+
geom_density(aes(x=observed,color='Observed'),size=2)+
geom_density(aes(x=simulated,color='Simulated'),size=2,linetype='dashed')+
scale_color_manual(values=pals::ocean.speed(3)[2:3])+
labs(color='Type')+
xlab('Standardized sum of residuals^2')
return(plot_grid(g1,g2))})
resid(o1)
#################################################################################
setMethod("resid","hbm_object",function(object){
sims=object@jags_model$sims.list
n=names(sims)
data=sims[n[regexpr('\\.s?fit$',n)>0]]|>
as.data.frame()|>
setNames(c('simulated','observed'))
attach(object@model_data);attach(object@jags_model$mean)
x=c()
for(i in 1:object@model_data$N){x=c(x,eval(parse(text=object@formula)))}
object@model_data$predicted=x
detach()
g1=ggplot(as.data.frame(object@model_data),
aes_string(x=paste(object@variables[1],'predicted',sep='-')))+
geom_density()
g2=ggplot(data)+
geom_density(aes(x=observed,color='Observed'),size=2)+
geom_density(aes(x=simulated,color='Simulated'),size=2,linetype='dashed')+
scale_color_manual(values=pals::ocean.speed(3)[2:3])+
labs(color='Type')+
xlab('Standardized sum of residuals^2')
return(plot_grid(g1,g2))})
resid(o1)
library(reshape2);library(cowplot)
resid(o1)
#################################################################################
setMethod("resid","hbm_object",function(object){
sims=object@jags_model$sims.list
n=names(sims)
data=sims[n[regexpr('\\.s?fit$',n)>0]]|>
as.data.frame()|>
setNames(c('simulated','observed'))
attach(object@model_data);attach(object@jags_model$mean)
x=c()
for(i in 1:object@model_data$N){x=c(x,eval(parse(text=object@formula)))}
object@model_data$predicted=x
detach()
g1=ggplot(as.data.frame(object@model_data),
aes_string(x=paste(object@variables[1],'predicted',sep='-')))+
geom_density()+
xlab('Standardized residuals')
g2=ggplot(data)+
geom_density(aes(x=observed,color='Observed'),size=2)+
geom_density(aes(x=simulated,color='Simulated'),size=2,linetype='dashed')+
scale_color_manual(values=pals::ocean.speed(3)[2:3])+
labs(color='Type')+
xlab('Standardized sum of residuals^2')
return(plot_grid(g1,g2))})
resid(o1)
?attach
attach(object@model_data,warn.conflicts=F)
#################################################################################
setMethod("resid","hbm_object",function(object){
sims=object@jags_model$sims.list
n=names(sims)
data=sims[n[regexpr('\\.s?fit$',n)>0]]|>
as.data.frame()|>
setNames(c('simulated','observed'))
attach(object@model_data,warn.conflicts=F)
attach(object@jags_model$mean,warn.conflicts=F)
x=c()
for(i in 1:object@model_data$N){x=c(x,eval(parse(text=object@formula)))}
object@model_data$predicted=x
detach()
g1=ggplot(as.data.frame(object@model_data),
aes_string(x=paste(object@variables[1],'predicted',sep='-')))+
geom_density()+
xlab('Standardized residuals')
g2=ggplot(data)+
geom_density(aes(x=observed,color='Observed'),size=2)+
geom_density(aes(x=simulated,color='Simulated'),size=2,linetype='dashed')+
scale_color_manual(values=pals::ocean.speed(3)[2:3])+
labs(color='Type')+
xlab('Standardized sum of residuals^2')
return(plot_grid(g1,g2))})
resid(o1)
o1=hbm(data,length~mass+(site),dist='dgamma')
resid(o1)
o2=hbm(data,offspring~mass+(site),dist='dnorm')
resid(o2)
o3=hbm(data,survival~mass+(site),dist='dnorm')
resid(o3)
o3=hbm(data,survival~mass+(site),dist='dbern')
resid(o3)
#################################################################################
setMethod("resid","hbm_object",function(object){
sims=object@jags_model$sims.list
n=names(sims)
data=sims[n[regexpr('\\.s?fit$',n)>0]]|>
as.data.frame()|>
setNames(c('simulated','observed'))
attach(object@model_data,warn.conflicts=F)
attach(object@jags_model$mean,warn.conflicts=F)
x=c()
for(i in 1:object@model_data$N){x=c(x,eval(parse(text=object@formula)))}
object@model_data$predicted=x
detach()
g1=ggplot(as.data.frame(object@model_data),
aes_string(x=paste(object@variables[1],'predicted',sep='-')))+
geom_density()+
xlab('Standardized residuals')
g2=ggplot(data)+
geom_density(aes(x=observed,color='Observed'),size=2)+
geom_density(aes(x=simulated,color='Simulated'),size=2,linetype='dashed')+
scale_color_manual(values=pals::ocean.speed(3)[2:3])+
labs(color='Type')+
xlab('Standardized sum of residuals^2')
return(plot_grid(g1,g2))})
resid(o2)
o2=hbm(data,offspring~mass+(site),dist='dgamma')
resid(o2)
fits(o2)
