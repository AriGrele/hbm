col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
return(hbm)})
o1@jags_model
summary(o1)
source('hbm.R')
o1=hbm(mix,length~mass+(site+species),format='mean')
hbm=o1
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0&hbm@format=='difference'){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
left
left=data.frame()
length(l)
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
#################################################################################
setGeneric("format_model", function(hbm) standardGeneric("format_model"))
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0&hbm@format=='difference'){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
else{left=data.frame();l=data.frame()}
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,names(filter))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
return(hbm)})
o1=hbm(mix,length~mass+(site+species),format='mean')
source('hbm.R')
o1=hbm(mix,length~mass+(site+species),format='mean')
hbm=o1
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0&hbm@format=='difference'){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
left=data.frame();l=data.frame()
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
right
Bs
alphas
betas
betas[length(betas)]
Bs
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
b
B
Bs
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
ngroup
col
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
right
sims
hbm@format
hbm@format=='difference'
hbm@format=='difference'*20
(hbm@format=='difference')*20
source('hbm.R')
o1=hbm(mix,length~mass+(site+species),format='mean')
o1@jags_model
summary(o1)
bass(o1,'mass','species')
o1=hbm(mix,length~mass+(site+species))
bass(o1,'mass','species')
library(ggplot2)
roll=function(x,n){
o=rep(NA,n-1)
for(i in n:length(x)){o=c(o,mean(x[(i-n):i],na.rm=T))}
return(o)}
d=readxl::read_excel("to do sheet.xlsx")
d=subset(d,regexpr('Metagear',d$`to do`)<0)
d$completed=as.numeric(d$completed)
d$added=as.numeric(d$added)
d$proposed=as.numeric(d$proposed)
d$proposed[is.na(d$proposed)|d$proposed=='']=
d$completed[is.na(d$proposed)|d$proposed=='']
d=d[order(d$added),]
o=data.frame('day'=d$added,'c'=rep(1,nrow(d)))
o2=data.frame('day'=d$added,'c'=rep(1,nrow(d)))
d=d[order(d$completed),]
o=rbind(o,data.frame('day'=d$completed,'c'=rep(-1,nrow(d))))
o=with(o,aggregate(c,list(day),sum))
o=o[order(o$Group.1),]
o$total=cumsum(o$x)
o2=rbind(o2,data.frame('day'=d$proposed,'c'=rep(-1,nrow(d))))
o2=with(o2,aggregate(c,list(day),sum))
o2=o2[order(o2$Group.1),]
o2$total=cumsum(o2$x)
o$Group.1=as.POSIXct(o$Group.1,origin='1970-01-01')
o2$Group.1=as.POSIXct(o2$Group.1,origin='1970-01-01')
ggplot(o,aes(x=Group.1,y=total))+
geom_point(aes(y=x),size=2,color='darkblue')+
geom_line(aes(y=roll(x,7)),size=1.5,color='blue')+
geom_step(size=2)+
geom_step(data=o2,size=1.5,linetype='dotted')+
theme_classic()+
scale_x_datetime()+
scale_y_continuous(expand=c(0,0),limits=c(min(o$x)*1.05,max(o$total)*1.05))+
geom_hline(yintercept=o$total[nrow(o)])+
geom_hline(yintercept=0)
