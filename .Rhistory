setMethod("bass","hbm_object",function(hbm,groups,fill='lower',s=1,label='none',lsize=1,interaction='none'){               #create groups cello plots, takes arguments of model output, focal groups, fill group, scale
data=hbm@output
out=list()
for(g in groups){
h=data[regexpr(g,data$lower)>0,]
v=hbmvar(h,c(fill))
if(interaction!='none'){out[[g]]=cello3(h,v,s,label=label,lsize=lsize,int=interaction)}
else{if(length(v$var)==1){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{if(v$var[2]=='upper'){out[[g]]=cello(h,v,s,label=label,lsize=lsize)}
else{out[[g]]=cello2(h,v,s)}}}}
return(out)})
#################################################################################
clamp=function(x,minimum,maximum){return(ifelse(x<minimum,minimum,ifelse(x>maximum,maximum,x)))}
randseq=function(x,size){out=c();for(i in 1:size){out=c(out,sample(x,1))};return(out)}
fixedmean=function(n,m,d){
out=c(rnorm(n-1,m,d))
return(c(out,(m-sum(out)/n)*n))}
# x => list(distrubition, mean, sd or other parameter)
# y => list(x,alpha,slope)
# g => list(groups,sd)
mixed=function(n,params){
data=setNames(as.data.frame(matrix(ncol=length(names(params)),nrow=n)),names(params))
rslope=list();ralpha=list()
resp=names(params)[sapply(names(params),\(x)length(params[[x]])>=3&is.character(params[[x]][[1]]))]
for(p in setdiff(names(params),resp)){
if(length(params[[p]])==2){
data[p]=randseq(params[[p]][[1]],n)
rslope[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[3]],params[[p]][[2]]),params[[p]][[1]])
ralpha[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[2]],params[[p]][[2]]),params[[p]][[1]])}}
for(p in setdiff(names(params),names(rslope))){
if(length(params[[p]])>=3){
if(is.function(params[[p]][[1]])){data[p]=params[[p]][[1]](n,params[[p]][[2]],params[[p]][[3]])}
else{
slope=rep(1/(mean(rslope[[1]])^(length(rslope)-1)),n)
alpha=rep(0,n)
for(i in names(rslope)){
slope=slope*rslope[[i]][data[,i]]
alpha=alpha+ralpha[[i]][data[,i]]/length(names(ralpha))}
data[p]=data[params[[p]][[1]]]*slope+alpha+rnorm(n,0,params[[p]][[2]])}}}
return(list(data,ralpha,rslope))}
####examples#####################################################################
#generate data
data=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
ggplot(data,aes(x=mass,y=abs(length),color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(site),rows=vars(species))+
theme_classic()
#single level
o=hbm(rbind(data,data),length~mass+(site))
summary(o)
ocean(o,'mass','site')[[1]]
polka(o,'mass','site')[[1]]
bass(o,'mass','site')[[1]]
#multiple levels
o=hbm(data,length~mass+(site+species))
summary(o)
ocean(o,'mass','species')[[1]]
polka(o,'mass','species')[[1]]
bass(o,'mass','species')[[1]]
#interaction
o=hbm(data,length~mass:sex+(site))
summary(o)
ocean(o,'mass','site',interaction='sex')[[1]]
polka(o,'mass','site',interaction='sex')[[1]]
bass(o,'mass','site',interaction='sex')[[1]]
#
# data$sex=as.numeric(data$sex)
# model='mass~length+sex
# length~sex'
# b=semb(data,model)
#interaction
o=hbm(data,length~mass:sex+(site))
summary(o)
o@filter
#multiple levels
o=hbm(data,length~mass+(site+species))
o@filter
unique(data$species)
summary(o)
o@filter
names(o$filter)
names(o@filter)
for(i in unique(names(o@filter))){print(o@filter[i])}
for(i in unique(names(o@filter))){print(o@filter[regexpr(i,names(o@filter))>0])}
#################################################################################
setGeneric("format_model", function(hbm) standardGeneric("format_model"))
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,2))
for(i in 1:length(vars)){
o[i]=hbm@model_data[[vars[i]]]
o[i+2]=names(hbm@model_data[[vars[i]]])}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),
vars)
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
for(i in unique(names(filter))){
group=filter[,regexpr(i,unique(names(filter)))>0]
group_filter=setNames(group[2],group[1])
for(j in nrow(filter)){
hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])}}
return(hbm)})
o=hbm(data,length~mass+(site+species))
summary(o)
o@filter
filter=o@filter
for(i in unique(names(filter))){
group=filter[,regexpr(i,unique(names(filter)))>0]
group_filter=setNames(group[2],group[1])
for(j in nrow(filter)){
o@output[,i]=sapply(o@output[,i],\(x)group_filter[x])}}
group
group_filter
for(i in unique(names(filter))){
group=filter[,regexpr(i,unique(names(filter)))>0]
group_filter=setNames(group[,2],group[,1])
for(j in nrow(filter)){
o@output[,i]=sapply(o@output[,i],\(x)group_filter[x])}}
group
group_filter
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(group[,2],group[,1])
for(j in nrow(filter)){
o@output[,i]=sapply(o@output[,i],\(x)group_filter[x])}}
group
group_filter
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(group[,2],group[,1])
o@output[,i]=sapply(o@output[,i],\(x)group_filter[x])}
i
group_filter
sapply(o@output[,i],\(x)group_filter[x]
)
o@output[,i]
o=hbm(data,length~mass+(site+species))
filter=o@filter
o@output
#################################################################################
setGeneric("format_model", function(hbm) standardGeneric("format_model"))
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,2))
for(i in 1:length(vars)){
o[i]=hbm@model_data[[vars[i]]]
o[i+2]=names(hbm@model_data[[vars[i]]])}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),
vars)
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
# for(i in unique(names(filter))){
#   group=filter[,regexpr(i,unique(names(filter)))>0]
#   group_filter=setNames(group[2],group[1])
#   for(j in nrow(filter)){
#     hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])}}
return(hbm)})
o=hbm(data,length~mass+(site+species))
filter=o@filter
summary(o)
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
x=sapply(o@output[,i],\(x)group_filter[x])}
x
unique(x)
#################################################################################
setGeneric("format_model", function(hbm) standardGeneric("format_model"))
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,2))
for(i in 1:length(vars)){
o[i]=hbm@model_data[[vars[i]]]
o[i+2]=names(hbm@model_data[[vars[i]]])}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),
vars)
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
return(hbm)})
o=hbm(data,length~mass+(site+species))
summary(o)
