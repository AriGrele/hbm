for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))
right
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out
unique(out[1:2])
#################################################################################
setGeneric("format_model", function(hbm) standardGeneric("format_model"))
setMethod("format_model","hbm_object",function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,each=2))
if(length(vars)>0){
for(i in 1:(length(vars))){
ind=(i-1)*2+1
o[ind]=hbm@model_data[[vars[i]]]
o[ind+1]=names(hbm@model_data[[vars[i]]])}}
filter=unique(o)
hbm@filter=filter
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
if(length(vars)>0){
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),vars)}
else{left=data.frame()}
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
count=0
cat('\nfixing hierarchy names\n')
for(i in unique(names(filter))){
group=unique(filter[,regexpr(i,unique(names(filter)))>0])
group_filter=setNames(c('all',group[,2]),c('all',group[,1]))
hbm@output[,i]=sapply(hbm@output[,i],\(x)group_filter[x])
count=count+1
progress(count/length(unique(names(filter))),50)}
return(hbm)})
#################################################################################
setGeneric("run_model", function(hbm) standardGeneric("run_model"))
setMethod("run_model","hbm_object",function(hbm){
cat('from',paste(hbm@model_dir,'/',
hbm@model_name,
'.txt',sep=''))
hbm@jags_model=jagsUI::jags(data=hbm@model_data,
n.adapt=hbm@n.adapt,
n.burnin=hbm@n.burnin,
n.iter=hbm@n.iter,
n.chains=hbm@n.chains,
modules="glm",
model.file=paste(hbm@model_dir,'/',
hbm@model_name,
'.txt',sep=''),
parameters.to.save=hbm@save,
verbose=T,
DIC=F)
return(hbm)})
#################################################################################
setGeneric("write_model", function(hbm) standardGeneric("write_model"))
setMethod("write_model","hbm_object",function(hbm){
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1;right=c(right,str_interp("(${paste(paste(q,collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q,collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn,collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2))'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2))')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,'/',hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)})
#################################################################################
hbm=function(data,model,...){
output=new('hbm_object')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='.',
'dist'        ='dnorm',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm','dgamma','dbern'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model!=''){output@model_name=output@source_model}
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
cat('\nFormatting data\n')
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
cat('\nmaking trace plots\n')
tryCatch(traces(output,cull=9),error=function(e){print(e)})
tryCatch(write.csv(summary(output),
paste0(output@dir,'/',output@name,'.csv'),row.names=F),
error=function(e){print(e)})
for(n in names(output@jags_model$Rhat)){
if(max(output@jags_model$Rhat[[n]],na.rm=T)>1.1){
cat(rep('#',50),'\nRhat Greater than 1.1 in\n',
paste(output@input,collapse = ' '),'\n',rep('#',50),'\n',sep='')
break}}
return(output)}
o1=hbm(data,length~mass)
summary(o1)
ocean(o1,'mass','site')
o1@var
hbm@vars
o1@vars
o1=hbm(data,length~mass+(site))
summary(o1)
o1=hbm(data,length~mass+())
o1=hbm(data,length~mass:site)
summary(o1)
ocean(o1,'mass','site')
ocean(o1,'mass')
ocean(o1,'mass',interaction='site')
resid(o1)
summary(o1)
fits(o1)
ppcheck
jagsUI::pp.check()
jagsUI::pp.check
#################################################################################
setGeneric("fits", function(obj,...) standardGeneric("fits"))
setMethod("fits",'run_model',function(obj,...){                               #summaries fit measures for Bayesian models, takes arguments of one or more model outputs
mc=match.call(expand.dots=T)
mods=c(list(obj@jags_model),list(...))
out=data.frame('response'=NA,'ppp'=NA,'DIC'=NA,
'names'=NA,'intercept'=NA,'slope'=NA,'r'=NA)
if(length(mods)>1){
for(m in 1:length(mods)){
mc=gsub('^.+ = ','c(',mc)                                                 #bizarre functionality, if this function breaks it's probably this line
mc=mc[mc!='fits']
new=fits(mods[[m]])
new$names=rep(mc[m],nrow(new))
out=rbind(out,new)}
out=na.omit(out)}
else{
sims=obj@jags_model$sims.list
groups=c()
for(n in names(sims)){
if(regexpr('\\.s?fit$',n)<=0){sims[[n]]=NULL}
else{groups[n]=gsub('\\.s?fit$','',n)}}
DIC=ifelse(obj@jags_model$calc.DIC,obj@jags_model$DIC,'NA')
n=names(groups)
par(mfrow=c(1,ceiling(length(n)/2)))
g=1;for(i in 1:(length(n)/2)){
sims=obj@jags_model$sims.list
x=sims[[n[g+1]]];y=sims[[n[g]]]
l=lm(y~x)
out=rbind(out,data.frame('response'=groups[n[g]],
'ppp'=pp.check(obj@jags_model,n[g+1],n[g]),
'DIC'=DIC,'names'='model','intercept'=coef(l)[1],
'slope'=coef(l)[2],r=summary(l)$r.squared))
abline(l,col='red')
g=g+2}
par(mfrow=c(1,1))}
return(na.omit(out))})
fits(o1)
