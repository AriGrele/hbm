llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}
ngroup
col
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
right
sims
hbm@format
hbm@format=='difference'
hbm@format=='difference'*20
(hbm@format=='difference')*20
source('hbm.R')
o1=hbm(mix,length~mass+(site+species),format='mean')
o1@jags_model
summary(o1)
bass(o1,'mass','species')
o1=hbm(mix,length~mass+(site+species))
bass(o1,'mass','species')
library(ggplot2)
roll=function(x,n){
o=rep(NA,n-1)
for(i in n:length(x)){o=c(o,mean(x[(i-n):i],na.rm=T))}
return(o)}
d=readxl::read_excel("to do sheet.xlsx")
d=subset(d,regexpr('Metagear',d$`to do`)<0)
d$completed=as.numeric(d$completed)
d$added=as.numeric(d$added)
d$proposed=as.numeric(d$proposed)
d$proposed[is.na(d$proposed)|d$proposed=='']=
d$completed[is.na(d$proposed)|d$proposed=='']
d=d[order(d$added),]
o=data.frame('day'=d$added,'c'=rep(1,nrow(d)))
o2=data.frame('day'=d$added,'c'=rep(1,nrow(d)))
d=d[order(d$completed),]
o=rbind(o,data.frame('day'=d$completed,'c'=rep(-1,nrow(d))))
o=with(o,aggregate(c,list(day),sum))
o=o[order(o$Group.1),]
o$total=cumsum(o$x)
o2=rbind(o2,data.frame('day'=d$proposed,'c'=rep(-1,nrow(d))))
o2=with(o2,aggregate(c,list(day),sum))
o2=o2[order(o2$Group.1),]
o2$total=cumsum(o2$x)
o$Group.1=as.POSIXct(o$Group.1,origin='1970-01-01')
o2$Group.1=as.POSIXct(o2$Group.1,origin='1970-01-01')
ggplot(o,aes(x=Group.1,y=total))+
geom_point(aes(y=x),size=2,color='darkblue')+
geom_line(aes(y=roll(x,7)),size=1.5,color='blue')+
geom_step(size=2)+
geom_step(data=o2,size=1.5,linetype='dotted')+
theme_classic()+
scale_x_datetime()+
scale_y_continuous(expand=c(0,0),limits=c(min(o$x)*1.05,max(o$total)*1.05))+
geom_hline(yintercept=o$total[nrow(o)])+
geom_hline(yintercept=0)
source('hbm.R')
#################################################################################
clamp=function(x,minimum,maximum){return(ifelse(x<minimum,minimum,ifelse(x>maximum,maximum,x)))}
randseq=function(x,size){out=c();for(i in 1:size){out=c(out,sample(x,1))};return(out)}
fixedmean=function(n,m,d){
out=c(rnorm(n-1,m,d))
return(c(out,(m-sum(out)/n)*n))}
mixed=function(n,params){
data=setNames(as.data.frame(matrix(ncol=length(names(params)),nrow=n)),names(params))
rslope=list();ralpha=list()
resp=names(params)[sapply(names(params),\(x)length(params[[x]])>=3&is.character(params[[x]][[1]]))]
for(p in setdiff(names(params),resp)){
if(length(params[[p]])==2){
data[p]=randseq(params[[p]][[1]],n)
rslope[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[3]],params[[p]][[2]]),params[[p]][[1]])
ralpha[[p]]=setNames(fixedmean(length(params[[p]][[1]]),params[[resp[1]]][[2]],params[[p]][[2]]),params[[p]][[1]])}}
for(p in setdiff(names(params),names(rslope))){
if(length(params[[p]])>=3){
if(is.function(params[[p]][[1]])){data[p]=params[[p]][[1]](n,params[[p]][[2]],params[[p]][[3]])}
else{
slope=rep(1/(mean(rslope[[1]])^(length(rslope)-1)),n)
alpha=rep(0,n)
for(i in names(rslope)){
slope=slope*rslope[[i]][data[,i]]
alpha=alpha+ralpha[[i]][data[,i]]/length(names(ralpha))}
data[p]=data[params[[p]][[1]]]*slope+alpha+rnorm(n,0,params[[p]][[2]])}}}
return(list(data,ralpha,rslope))}
####examples#####################################################################
#generate data
mix=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1)))[[1]]
data=data.frame(mass=mix$mass)
data$slope=1:4
data$site=letters[1:4]
data$length=rnorm(200,data$mass*data$slope,1)
data$offspring=rgamma(200,shape=1,rate=1/data$mass*data$slope)
data$survival=(data$mass>15)+0
cowplot::plot_grid(
ggplot(data,aes(x=mass,y=length,color=site))+
geom_point()+
geom_smooth(method=lm),
ggplot(data,aes(x=mass,y=offspring,color=site))+
geom_point()+
geom_smooth(method=lm),
ggplot(data,aes(x=mass,y=survival,color=site))+
geom_point()+
geom_smooth(method=lm),
ggplot(data,aes(x=length,color=site))+geom_density(),
ggplot(data,aes(x=offspring,color=site))+geom_density(),
ggplot(data,aes(x=survival,color=site))+geom_density(bw=.01),ncol=3)
# #interaction
# o=hbm(data,length~mass:sex+(site))
# summary(o)
# ocean(o,'mass','site',interaction='sex')[[1]]
# polka(o,'mass','site',interaction='sex')[[1]]
# bass(o,'mass','site',interaction='sex')[[1]]
#
# set.seed(1)
# o1=hbm(data,length~mass+(site),dist='dgamma')
# fits(o1)
set.seed(1)
o1=hbm(mix,length~mass+(site+species))
bass(o1,'mass','species')
o1=hbm(mix,length~mass+sex+(site+species))
o1=hbm(mix,length~mass+sex+(site+species),format='mean')
hbm=o1
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
if(hbm@format=='difference'){formfilter=1:length(rv[[2]])}
else{formfilter=length(rv[[2]])}
formfilter=length(rv[[2]])
rv
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1
right=c(right,str_interp("(${paste(paste(q[formfilter],collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q[formfilter],collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
q
paste(q[formfilter],collapse='+')
right
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn[formfilter],collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
top
as.data.frame(rv)
View(as.data.frame(rv))
r
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
mu=c(0,0)
if(hbm@format=='mean'){mu=as.data.frame(rv)[q,]}
types=c(types,str_interp('~dnorm(${mu[1]},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu[2]},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
if(hbm@format=='difference'){formfilter=1:length(rv[[2]])}
else{formfilter=length(rv[[2]])}
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1
right=c(right,str_interp("(${paste(paste(q[formfilter],collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q[formfilter],collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn[formfilter],collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
mu=c(0,0)
if(hbm@format=='mean'){mu=as.data.frame(rv)[q,]}
types=c(types,str_interp('~dnorm(${mu[1]},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu[2]},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
r
r[q]
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle
#################################################################################
setGeneric("write_model", function(hbm) standardGeneric("write_model"))
setMethod("write_model","hbm_object",function(hbm){
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
formula=as.character(hbm@input$model)[3]
if(regexpr('\\(',formula)<0){formula=paste0(formula,' + ()')}
hbm@vars=strsplit(formula,'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
if(length(hbm@vars[[2]])>0){
hbm@data=hbm@data[order(hbm@data[,hbm@vars[[2]][1]]),]}
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
if(hbm@format=='difference'){formfilter=1:length(rv[[2]])}
else{formfilter=length(rv[[2]])}
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1
right=c(right,str_interp("(${paste(paste(q[formfilter],collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q[formfilter],collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn[formfilter],collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
hbm@formula=paste(paste(rn,collapse='+'),paste(right,collapse='+'),sep='+')
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
mu=0
if(hbm@format=='mean'){mu=r[q]}
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(${mu},a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(${mu},${t[q+1]})'))}}
if(hbm@format=='mean'){
if(q==1){types=gsub('[i]','',types,fixed=T)}
else{types=gsub(is[q],paste(paste('[',letters[1:(q-1)],']',sep=''),collapse=''),types,fixed=T)}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2))'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2))')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,'/',hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)})
write_model(o1)
