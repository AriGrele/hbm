left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',nrow(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
ngroup=ifelse(nrow(left)>0,nrow(left),1)
if(TRUE){
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:ngroup){
bc=match(b,betas)
bl=length(betas)*ngroup
progress((i+(bc-1)*bl)/bl,50)
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='beta_all']}}}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:ngroup){
bc=match(a,alphas)
bl=length(alphas)*ngroup
progress((i+(bc-1)*bl)/bl,50)
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]*(hbm@format=='difference')+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{
if(length(l==1)){out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
else{out=rbind(out,right)}}
medians[['all']]=right$response[right$upper=='alpha_all']}}}}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
hbm@output
count=0
cat('\nfixing hierarchy names\n')
names(hbm@filter)
length(names(hbm@filter))
set.seed(1)
source('hbm.R')
o1=hbm(mix,length~mass)
summary(o1)
data$sex=as.numeric(data$sex)
mix$sex=as.numeric(mix$sex)
mix$sex
mix$sex=as.numeric(as.factor(mix$sex))
####examples#####################################################################
#generate data
mix=mixed(200,list('mass'=list(runif,10,20),
'length'=list('mass',1,2),
'site'=list(LETTERS[1:5],1),
'species'=list(c('s1','s2','s3'),1),
'sex'=list(c('M','F'),1),
'color'=list(c('red','blue','yellow'),1)))[[1]]
mix$species[mix$site=='A']=c('fish','moose')
mix$species[mix$site=='B']=c('s1','s4')
ggplot(mix,aes(x=mass,y=length,color=paste(species,color)))+
geom_point()+
geom_smooth(method=lm)+
facet_grid(cols=vars(site))
mix$sex=as.numeric(as.factor(mix$sex))
model='mass~length+sex
length~sex'
b=semb(data,model)
b=bsem(data,model)
source('hbm.R')
b=bsem(data,model)
hbm
source('hbm.R')
b=bsem(data,model)
#################################################################################
bsem=function(data,model,...){                                                   #write and compute Bayesian structural equation models, takes arguments of model string, data, directory to save to
output=new('bsem_object')
param=list(...)
defaults=list('name'        ='unnamed_bsem',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
output=tryCatch(write_bsem(output),error=\(x){print(x);return(output)})
output@model_data=list('N'=nrow(output@data))
for(o in unique(old)){output@model_data=c(output@model_data,
setNames(list(output@data[,o]),
paste('y.',o,sep='')))}
inits=function(){list(sigma=rep(1,length(lefts)))}
parameters=c(parameters,c(LETTERS,letters)[1:length(lefts)])
output@jags_model=tryCatch(jags(output@model_data,
inits,
parameters,
paste0(output@dir,'/',output@name,'.jags'),
n.chains=output@n.chains,
n.thin=output@n.thin,
n.iter=output@n.iter,
n.burnin=output@n.burnin,
parallel=F),
error=function(e){print(e);return(NULL)})
cat('\nMaking trace plots\n')
tryCatch(traces(output),error=function(e){print(e)})
return(output)}
b=bsem(data,model)
source('hbm.R')
b=bsem(data,model)
b
b=bsem(data,model)
source('hbm.R')
source('hbm.R')
b=bsem(data,model)
b@model
source('hbm.R')
b=bsem(data,model)
output=new('bsem_object')
defaults=list('name'        ='unnamed_bsem',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
'model'=model,
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
param=list(...)
param=list()
defaults=list('name'        ='unnamed_bsem',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
'model'=model,
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
output
output@model_data=list('N'=nrow(output@data))
for(o in unique(old)){output@model_data=c(output@model_data,
setNames(list(output@data[,o]),
paste('y.',o,sep='')))}
hbm=output
rows=str_split(hbm@model,'\n')[[1]]
row=c();lefts=c();rights=c();old=c()
for(r in 1:length(rows)){
item=c(LETTERS,letters)[r]
rights=c(rights,paste(item,'[1]',sep=''))
groups=str_split(rows[r],'~')[[1]]
left=paste(groups[1],'[i]',sep='')
lefts=c(lefts,left)
old=c(old,groups[1])
Right=str_split(groups[2],'\\+')[[1]]
new=c(paste(item,'[1]',sep=''))
for(i in 1:length(Right)){
old=c(old,Right[i])
new=c(new,paste(item,'[',i+1,']*y.',Right[i],'[i]',sep=''))
rights=c(rights,paste(item,'[',i+1,']',sep=''))}
right=paste(new,collapse=' + ')
row=c(row,paste(left,right,sep=' = '))}
row=paste(row,collapse='\n')
upper=paste('model {\nfor (i in 1:N){',row,'}',sep='\n')
new=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',lefts[l],'~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.sim[i]~dnorm(',lefts[l],',tau[',l,'])',sep=''),
paste('y.',base,'.res[i]=y.',lefts[l],'-',lefts[l],sep=''),
paste('y.',base,'.sres[i]=y.',base,'.sim[i]-',lefts[l],sep=''))}
row=paste(new,collapse='\n')
middle=paste('for (i in 1:N){',row,'}',sep='\n')
new=c()
for(r in rights){new=c(new,paste(r,'dnorm(0.0,0.01)',sep=' ~ '))}
lower=paste(new,collapse='\n')
bottom=paste('for (j in 1:',
length(lefts),
'){\nsigma[j] ~ dgamma(1,1)\ntau[j] <- pow(sigma[j], -2)\n}\n}',
sep='')
new=c();parameters=c()
for(l in 1:length(lefts)){
base=gsub('\\[i\\]','',lefts[l])
new=c(new,paste('y.',
base,'.fit=sum(pow(y.',base,'.res[],2)/tau[',l,'])',sep=''),
paste('y.',
base,'.sfit=sum(pow(y.',base,'.sres[],2)/tau[',l,'])',sep=''))
parameters=c(parameters,
paste('y.',base,'.sfit',sep=''),
paste('y.',base,'.fit',sep=''))}
tail=paste(new,collapse='\n')
formula=paste(upper,middle,lower,tail,bottom,sep='\n')
sink(paste0(output@dir,'/',output@name,'.jags'))
cat(formula,fill=T)
sink()
old
source('hbm.R')
b=bsem(data,model)
source('hbm.R')
b=bsem(data,model)
output=new('bsem_object')
param=list()
defaults=list('name'        ='unnamed_bsem',
'dir'         ='.',
'model_dir'   ='.',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.thin'      =5,
'n.chains'    =4)
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
'model'=model,
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
output=tryCatch(write_bsem(output),error=\(x){print(x);return(output)})
output@model_data=list('N'=nrow(output@data))
for(o in unique(output@variables)){output@model_data=c(output@model_data,
setNames(list(output@data[,o]),
paste('y.',o,sep='')))}
output@variables
o
output@data
b=bsem(mix,model)
hbm=b
hbm@jags_model
samples=hbm@jags_model$samples                                                #select samples and columns
cols=colnames(hbm@jags_model$samples[[1]])
allucols=unique(gsub('\\[.+]$','',cols));ucols=allucols[1]                    #correct colnames
for(u in allucols){                                                           #for each col:
stop=0
for(q in ucols){if(regexpr(u,q)>0|regexpr(q,u)>0){stop=1}}                  #   stop when non-unique column reached
if(stop==0){ucols=c(ucols,u)}}                                              #   append col after stop
nchains=hbm@jags_model$mcmc.info$n.chains                                     #extract mcmc info from model
xmax=hbm@jags_model$mcmc.info$n.samples/nchains
plots=list();k=0                                                              #empty vars for output
for(u in ucols){                                                              #for each column:
out=list()
for(i in cols[regexpr(u,cols)>0]){
k=k+1
e=stringr::str_extract_all(i,'(\\[\\d+,\\d+\\])|(\\[\\d+\\])')
pos=eval(parse(text=gsub('\\]','\\)',gsub('\\[','c\\(',e))))
rhat=ifelse(length(pos)==1,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1]],
ifelse(length(pos)==0,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]],
hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1],pos[2]]))
m=suppressMessages(reshape2::melt(as.data.frame(
coda::as.array.mcmc.list(samples[,i])))[c(T,rep(F,cull)),])
out[[i]]=ggplot(m)+
geom_line(aes(x=rep(1:xmax,nchains)[c(T,rep(F,cull))],
y=value,color=variable),alpha=1/nchains*2,size=1)+
theme_classic()+
theme(text=element_text(size=65),
panel.border=element_rect(fill=F,size=5),
axis.text = element_blank())+
ggtitle(i,subtitle =paste('Rhat =',round(rhat,4)))+
guides(color='none')+
xlab('')+ylab('')+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand=c(0,0))
if(rhat<1.1){out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.ice(nchains))}
else{out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.matter(nchains))}
progress(k/length(cols),50)}
n=floor(sqrt(length(out)))
if(mean(regexpr('traces',list.dirs(hbm@dir))<0)==1){
suppressMessages(dir.create(paste0(hbm@dir,'/traces/')))}
png(paste0(hbm@dir,'/traces/',hbm@name,u,'.png'),1000*n,1000*length(out)/n)
do.call(gridExtra::grid.arrange,c(out,ncol=n))
dev.off()}})
for(u in ucols){                                                              #for each column:
out=list()
for(i in cols[regexpr(u,cols)>0]){
k=k+1
e=stringr::str_extract_all(i,'(\\[\\d+,\\d+\\])|(\\[\\d+\\])')
pos=eval(parse(text=gsub('\\]','\\)',gsub('\\[','c\\(',e))))
rhat=ifelse(length(pos)==1,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1]],
ifelse(length(pos)==0,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]],
hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1],pos[2]]))
m=suppressMessages(reshape2::melt(as.data.frame(
coda::as.array.mcmc.list(samples[,i])))[c(T,rep(F,cull)),])
out[[i]]=ggplot(m)+
geom_line(aes(x=rep(1:xmax,nchains)[c(T,rep(F,cull))],
y=value,color=variable),alpha=1/nchains*2,size=1)+
theme_classic()+
theme(text=element_text(size=65),
panel.border=element_rect(fill=F,size=5),
axis.text = element_blank())+
ggtitle(i,subtitle =paste('Rhat =',round(rhat,4)))+
guides(color='none')+
xlab('')+ylab('')+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand=c(0,0))
if(rhat<1.1){out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.ice(nchains))}
else{out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.matter(nchains))}
progress(k/length(cols),50)}
n=floor(sqrt(length(out)))
if(mean(regexpr('traces',list.dirs(hbm@dir))<0)==1){
suppressMessages(dir.create(paste0(hbm@dir,'/traces/')))}
png(paste0(hbm@dir,'/traces/',hbm@name,u,'.png'),1000*n,1000*length(out)/n)
do.call(gridExtra::grid.arrange,c(out,ncol=n))
dev.off()}
cull=0
for(u in ucols){                                                              #for each column:
out=list()
for(i in cols[regexpr(u,cols)>0]){
k=k+1
e=stringr::str_extract_all(i,'(\\[\\d+,\\d+\\])|(\\[\\d+\\])')
pos=eval(parse(text=gsub('\\]','\\)',gsub('\\[','c\\(',e))))
rhat=ifelse(length(pos)==1,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1]],
ifelse(length(pos)==0,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]],
hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1],pos[2]]))
m=suppressMessages(reshape2::melt(as.data.frame(
coda::as.array.mcmc.list(samples[,i])))[c(T,rep(F,cull)),])
out[[i]]=ggplot(m)+
geom_line(aes(x=rep(1:xmax,nchains)[c(T,rep(F,cull))],
y=value,color=variable),alpha=1/nchains*2,size=1)+
theme_classic()+
theme(text=element_text(size=65),
panel.border=element_rect(fill=F,size=5),
axis.text = element_blank())+
ggtitle(i,subtitle =paste('Rhat =',round(rhat,4)))+
guides(color='none')+
xlab('')+ylab('')+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand=c(0,0))
if(rhat<1.1){out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.ice(nchains))}
else{out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.matter(nchains))}
progress(k/length(cols),50)}
n=floor(sqrt(length(out)))
if(mean(regexpr('traces',list.dirs(hbm@dir))<0)==1){
suppressMessages(dir.create(paste0(hbm@dir,'/traces/')))}
png(paste0(hbm@dir,'/traces/',hbm@name,u,'.png'),1000*n,1000*length(out)/n)
do.call(gridExtra::grid.arrange,c(out,ncol=n))
dev.off()}
if(mean(regexpr('traces',list.dirs(hbm@dir))<0)==1){
suppressMessages(dir.create(paste0(hbm@dir,'/traces/')))}
png(paste0(hbm@dir,'/traces/',hbm@name,u,'.png'),1000*n,1000*length(out)/n)
do.call(gridExtra::grid.arrange,c(out,ncol=n))
out=list()
for(i in cols[regexpr(u,cols)>0]){
k=k+1
e=stringr::str_extract_all(i,'(\\[\\d+,\\d+\\])|(\\[\\d+\\])')
pos=eval(parse(text=gsub('\\]','\\)',gsub('\\[','c\\(',e))))
rhat=ifelse(length(pos)==1,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1]],
ifelse(length(pos)==0,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]],
hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1],pos[2]]))
m=suppressMessages(reshape2::melt(as.data.frame(
coda::as.array.mcmc.list(samples[,i])))[c(T,rep(F,cull)),])
out[[i]]=ggplot(m)+
geom_line(aes(x=rep(1:xmax,nchains)[c(T,rep(F,cull))],
y=value,color=variable),alpha=1/nchains*2,size=1)+
theme_classic()+
theme(text=element_text(size=65),
panel.border=element_rect(fill=F,size=5),
axis.text = element_blank())+
ggtitle(i,subtitle =paste('Rhat =',round(rhat,4)))+
guides(color='none')+
xlab('')+ylab('')+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand=c(0,0))
if(rhat<1.1){out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.ice(nchains))}
else{out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.matter(nchains))}
progress(k/length(cols),50)}
plots=list();k=0                                                              #empty vars for output
for(u in ucols){                                                              #for each column:
out=list()
for(i in cols[regexpr(u,cols)>0]){
k=k+1
e=stringr::str_extract_all(i,'(\\[\\d+,\\d+\\])|(\\[\\d+\\])')
pos=eval(parse(text=gsub('\\]','\\)',gsub('\\[','c\\(',e))))
rhat=ifelse(length(pos)==1,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1]],
ifelse(length(pos)==0,hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]],
hbm@jags_model$Rhat[[gsub('\\[.+]$','',i)]][pos[1],pos[2]]))
m=suppressMessages(reshape2::melt(as.data.frame(
coda::as.array.mcmc.list(samples[,i])))[c(T,rep(F,cull)),])
out[[i]]=ggplot(m)+
geom_line(aes(x=rep(1:xmax,nchains)[c(T,rep(F,cull))],
y=value,color=variable),alpha=1/nchains*2,size=1)+
theme_classic()+
theme(text=element_text(size=65),
panel.border=element_rect(fill=F,size=5),
axis.text = element_blank())+
ggtitle(i,subtitle =paste('Rhat =',round(rhat,4)))+
guides(color='none')+
xlab('')+ylab('')+
scale_x_continuous(expand = c(0,0))+
scale_y_continuous(expand=c(0,0))
if(rhat<1.1){out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.ice(nchains))}
else{out[[i]]=out[[i]]+
scale_color_manual(values=pals::ocean.matter(nchains))}
progress(k/length(cols),50)}
n=floor(sqrt(length(out)))
if(mean(regexpr('traces',list.dirs(hbm@dir))<0)==1){
suppressMessages(dir.create(paste0(hbm@dir,'/traces/')))}
png(paste0(hbm@dir,'/traces/',hbm@name,u,'.png'),1000*n,1000*length(out)/n)
do.call(gridExtra::grid.arrange,c(out,ncol=n))
dev.off()}
traces(b)
source('hbm.R')
b=bsem(mix,model)
source('hbm.R')
b=bsem(mix,model)
b
o1=hbm(mix,length~mass)
