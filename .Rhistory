for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1;right=c(right,str_interp("(${paste(paste(q,collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q,collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn,collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2)/tau)'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2)/tau)')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)}
#################################################################################
hbm=function(data,model,...){
output=new('hbm')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='./',
'dist'        ='dnorm',
'model_dir'   ='',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model==''){
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})}
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
return(output)
}
#o=hbm(data.frame('herb'=1:10,'div'=1:10,'flood'=1,'site'='a','sex'='moose'),herb~div:flood+(site+sex),name='testing')
source('C:/Users/Ari/Documents/Scripts/helper functions/generators.R')
library(ggplot2)
data=data.frame('mass'=rep(0:1,each=50),'length'=rep(0:1,each=50)+rnorm(100,1,.1),'sex'=rep(c('0','1','0','1'),each=25),'b'=rep(c('A','B'),50))
data$length[data$sex=='1']=5*abs(data$length[data$sex=='1'])
#data$length[data$site=='B']=-1*abs(data$length[data$site=='B'])
data$site=data$b
ggplot(data,aes(x=mass,y=length,color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(b))+
theme_classic()
o=hbm(data,length~mass:sex+(site))
library(stringr)
hbm_model=setClass('model',slots=list(
'input'     ='call',
'dist'      ='character',
'model_dir' ='character',
'model_name'='character',
'variables' ='vector',
'vars'      ='list',
'model'     ='character',
'model_data'='list',
'scales'    ='vector',
'save'      ='vector'))
hbm_run=setClass('jags',slots=list(
'n.adapt'   ='numeric',
'n.burnin'  ='numeric',
'n.iter'    ='numeric',
'n.chains'  ='numeric',
'jags_model'='jagsUI',
'output'    ='data.frame'))
hbm_data=setClass('hbm',slots=list(
'name'        ='character',
'dir'         ='character',
'data'        ='data.frame',
'source_model'='character'),
contains=c('model','jags'))
#################################################################################
progress=function(percent,len,char='='){                                        #print progress bar to console, takes arguments of percent progress, nchar to print at 100%, character to form the bar from
k=round(percent*len)                                                          #nchar to print at current percent
cat('|',                                                                      #print
rep(char,k),
rep(' ',len-k),'| ',percent*100,'%                  \r',sep='')
if(percent==1){cat('\n')}}                                                    #new line at 100%
#################################################################################
expand=function(x){o=c();for(i in x){o=c(o,1:i)};return(o)}
#################################################################################
chunk=function(ar,len){                                                         #breaks array into equal chunks, takes arguments of array, chunk length
o=list();c=0                                                                  #define vars
for(i in len*0:(length(ar)/len-1)){i=i+1;c=c+1;o[[c]]=ar[(i):(i+len-1)]}      #split into groups of set length, append to list
return(o)}
#################################################################################
response=function(hbm){
if(!(hbm@dist%in%c('dnorm'))){return()}
return(switch(hbm@dist,
'dnorm'=str_interp('${hbm@dist}(mu[i],tau)')))}
#################################################################################
ilen=function(data,v,x=1){                                                      #returns counts of factors in each level of hierarchy, take argument of dataframe, vector of col names
o=c()                                                                         #define var
d=as.numeric(as.factor(data[,v[x]]))                                          #characters to numbers
if(x==length(v)){return(length(unique(d)))}                                   #return on final value
else{for(i in unique(d)){o[i]=(ilen(data[d==i,],v,x+1))};return(o)}}          #otherwise repeat for sub-hierarchies
#################################################################################
flip=function(x){                                                               #takes a named vector and returns vector of names, now named for the values they represent in original vector
if(is.list(x)){x=x[[1]]}                                                      #edge use case
o=data.frame('i'=NA,'name'=NA)                                                #empty dataframe
for(i in 1:length(x)){o=rbind(o,data.frame('i'=x[i],'name'=names(x[i])))}     #iterate through items and append names to frame
return(with(unique(na.omit(o)),setNames(name,i)))}                            #return renamed names
#################################################################################
items=function(data,v,x=1){                                                     #recursive function for generating named list from dataframe columns, take argument of dataframe, vector of col names
o=c()                                                                         #define var
d=as.numeric(as.factor(data[,v[x]]))                                          #characters to numbers
d=setNames(d,data[,v[x]])                                                     #rename based on original values
n=setNames(unique(data[,v[x]]),unique(d))
if(x==length(v)){return(d)}                                                   #return on final value
else{for(i in unique(d)){o=c(o,items(data[d==i,],v,x+1))};return(o)}}         #otherwise repeat for sub-hierarchies
#################################################################################
format_data=function(hbm){
hbm@model_data=list('N'=nrow(hbm@data))
hbm@model_data[as.character(hbm@input$model)[2]]=
list(hbm@data[,as.character(hbm@input$model)[2]])
full_names=c()
for(n in hbm@variables){full_names=c(full_names,strsplit(n,':')[[1]])}
hbm@variables=unique(full_names)
for(n in unique(c(hbm@vars[[1]],hbm@variables))){
if(!is.numeric(hbm@data[,n])){
hbm@model_data[n]=list(as.numeric(as.factor(hbm@data[,n])))}
else{hbm@model_data[n]=list(hbm@data[,n])}}
convert=list()
if(length(hbm@vars[[2]])>1){for(n in 2:length(hbm@vars[[2]])){
hbm@model_data[hbm@vars[[2]][n]]=list(items(hbm@data,hbm@vars[[2]][2:n]))
convert[[hbm@vars[[2]][n]]]=flip(hbm@model_data[[hbm@vars[[2]][n]]])
hbm@model_data[paste('N',hbm@vars[[2]][n],sep='')]=
list(ilen(hbm@data,hbm@vars[[2]][2:n]))}}
hbm@scales=list()
for(m in hbm@variables){
if(length(hbm@model_data[[m]])>1&!(m%in%hbm@vars[[2]])){
if(m!='error'){
hbm@scales[[m]]=attributes(scale(hbm@model_data[[m]],center=F))$scale
hbm@model_data[[m]]=as.numeric(scale(hbm@model_data[[m]],center=F))}
else{
hbm@scales[[m]]=1
hbm@model_data[[m]]=as.numeric(hbm@model_data[[m]])}}}
return(hbm)}
#################################################################################
format_model=function(hbm){
vars=hbm@vars[[2]][-1]
o=as.data.frame(matrix(nrow=hbm@model_data$N,ncol=2*length(vars)))|>
setNames(rep(vars,2))
for(i in 1:length(vars)){
o[i]=hbm@model_data[[vars[i]]]
o[i+2]=names(hbm@model_data[[vars[i]]])}
filter=unique(o)
sims=hbm@jags_model$sims.list
for(n in names(sims)){if(regexpr('\\.s?fit$',n)>0){sims[[n]]=NULL}}
name=names(sims)
A=name[regexec('[aA]lpha',name)>0]
B=name[regexec('beta',name)>0]
l=list()
for(n in vars){l[[n]]=(hbm@model_data[paste('N',n,sep='')])[[1]]}
left=setNames(as.data.frame(matrix(nrow=sum(l[[length(l)]]),ncol=length(l))),
vars)
if(length(l)>1){
for(i in length(l):2){
if(sum(!is.na(left[[i]]))==0){
left[i]=expand(l[[i]])
left[i][left[i]==1]=0}
left[i-1]=gap(left[,i],expand(l[[i-1]]),as.numeric(l[i][[1]]))}
left[length(left)][left[length(left)]==0]=1
for(i in 1:(length(l)-1)){
left[,i][left[,i]==0]=expand(l[[i]])}
for(i in 1:(length(left)-1)){
first=unique(left[1:i])
for(q in 1:(length(left)-i)){first=cbind(first,rep('all',length(first)))}
left=rbind(setNames(first,names(left)),left)}
left=rbind(setNames(rep('all',length(left)),names(left)),unique(left))
for(i in names(left)){
left=rbind(left[left[,i]=='all',],
left[left[,i]!='all',][order(
as.numeric(left[,i][left[,i]!='all'])),])}}
if(length(l)==1){
left[1]=expand(l[[1]])
left=rbind(setNames(data.frame('all'),names(left)),left)}
p=list()
out=setNames(as.data.frame(matrix(ncol=3+length(left))),
c(names(left),c('upper','lower','response')))
counts=list();medians=list()
betas=B[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),B)<0]
cat('\nformating slopes\n')
for(b in betas){
Bs=B[regexpr(b,B)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],
error=function(e) return('beta_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,
cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(
setNames(as.data.frame(rep(left[i,],nrow(right))),
names(left)),right))}}}
else{
right=data.frame('upper'='beta_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='beta_all']}}
progress(match(b,betas)/length(betas),50)}
counts=list();medians=list()
alphas=A[regexpr(paste(paste('_',names(left),'$',sep=''),collapse='|'),A)<0]
cat('\nformating intercepts\n')
for(a in alphas){
Bs=A[regexpr(a,A)>0]
for(i in 1:nrow(left)){
col=names(left)[regexpr('all',left[i,])<0]
if(length(col)>0){
lup=tryCatch(left[i,col[length(col)-1]],error=function(e) return('all'))
if(length(lup)==0){lup='all'}
llo=tryCatch(left[i,col[length(col)]],error=function(e) return('all'))
upp=tryCatch(Bs[regexpr(col[length(col)-1],Bs)>0],error=function(e) return('alpha_all'))
col=paste('_',col,'$',sep='')
lab=Bs[regexpr(col[length(col)],Bs)>0]
for(slab in lab){
if(!(slab %in% names(counts))){counts[[slab]]=0}
counts[[slab]]=counts[[slab]]+1
right=data.frame('upper'=upp,
'lower'=lab,
'response'=medians[[lup]]+
as.numeric(as.data.frame(sims[slab])[counts[[slab]]][,1]))
if(length(col)<length(left)){
medians[[llo]]=right$response}
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}}
}
else{
right=data.frame('upper'='alpha_all','lower'=Bs[1],'response'=sims[[Bs[[1]]]])
if(length(left)>1){out=rbind(out,cbind(repframe(left[i,],nrow(right)),right))}
else{out=rbind(out,cbind(setNames(as.data.frame(rep(left[i,],nrow(right))),names(left)),right))}
medians[['all']]=right$response[right$upper=='alpha_all']}}
progress(match(a,alphas)/length(alphas),50)}
out=na.omit(out)#[c(T,rep(F,99)),] #culling
out$response[out$lower %in% A]=out$response[out$lower %in% A]*as.numeric(hbm@scales[1])
cat('\nbacktransforming data\n')
for(sb in names(hbm@scales[-1])){
out$response[regexpr(sb,out$lower)>0]=out$response[regexpr(sb,out$lower)>0]*as.numeric(hbm@scales[1])/as.numeric(hbm@scales[sb])
progress(match(sb,names(hbm@scales[-1]))/length(names(hbm@scales[-1])),50)}
hbm@output=out
for(i in 1:nrow(filter)){hbm@output[,1][out[,1]==filter[,1][i]]=filter[,3][i]}
return(hbm)}
#################################################################################
run_model=function(hbm){
hbm@jags_model=jagsUI::jags(data=hbm@model_data,
n.adapt=hbm@n.adapt,
n.burnin=hbm@n.burnin,
n.iter=hbm@n.iter,
n.chains=hbm@n.chains,
modules="glm",
model.file=paste(hbm@model_dir,
hbm@model_name,
'.txt',sep=''),
parameters.to.save=hbm@save,
verbose=T,
DIC=F)
return(hbm)}
#################################################################################
write_model=function(hbm){
slot(hbm,'variables')=c(as.character(hbm@input$model)[2],
strsplit(gsub('\\((.+)\\)','\\1',
as.character(hbm@input$model)[3]),
' \\+ ')[[1]])
hbm@vars=strsplit(as.character(hbm@input$model)[3],'\\(')[[1]]|>
(\(x)gsub(')','',x))()|>
(\(x)gsub(' \\+ ',',',x))()|>
(\(x)gsub(',$','',x))()|>
strsplit(',')|>
setNames(c('Variables','Groups'))
var1_terms=c()
hbm@vars[['Interaction terms']]=list()
for(q in hbm@vars[[1]]){
if(regexpr(':',q)>0){
split=strsplit(q,':')[[1]]
var1_terms=c(var1_terms,split[1])
if(split[1]%in%names(hbm@vars[[3]])){
hbm@vars[[3]][[split[1]]]=c(hbm@vars[[3]][[split[1]]],split[-1])}
else{hbm@vars[[3]]=c(hbm@vars[[3]],setNames(list(split[-1]),split[1]))}}
else{var1_terms=c(var1_terms,q)}}
hbm@vars[[1]]=var1_terms
new_i='i'
while(T){                                                                     #if i in variable names generate replacement variable for iterations in model
if(new_i%in%hbm@variables){new_i=paste(new_i,sample(letters,1),sep='')}
else{break}}
new=c(str_interp('${as.character(hbm@input$model)[2]}[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.sim[i]~${response(hbm)}'),
str_interp('${as.character(hbm@input$model)[2]}.res[i]=${as.character(hbm@input$model)[2]}[i]-mu[i]'),
str_interp('${as.character(hbm@input$model)[2]}.sres[i]=${as.character(hbm@input$model)[2]}.sim[i]-mu[i]'))
left=paste(new,collapse='\n\t')
for(q in hbm@vars[[2]]){
if(q!=''){hbm@data[q]=factor(hbm@data[,q],levels=unique(hbm@data[,q]))}}
hbm@data=hbm@data[order(hbm@data[hbm@vars[[2]][1]]),]                         ####this one probably gives the xtfrm warning
rv=is=c();c=0
hbm@vars[[2]]=tryCatch(c('',hbm@vars[[2]]),error=function(e){c('')})
x=paste(c('',rep('[',length(hbm@vars[[2]])-1)),hbm@vars[[2]],sep='')|>
(\(x)paste(x,'[i]',sep=''))()|>
(\(x)paste(x,c('',rep(']',length(hbm@vars[[2]])-1)),sep=''))()
for(q in hbm@vars[[2]]){
c=c+1;is=c(is,paste(c('',x[-1])[1:c],collapse=''))
rv=c(rv,paste('alpha',q,sep='_'))}
for(w in hbm@vars[[1]]){
for(q in hbm@vars[[2]]){rv=c(rv,paste('beta',w,q,sep='_'))}}
rv=chunk(gsub('_$','[i]',paste(rv,is,sep='')),length(hbm@vars[[2]]))
right=c()
rv=unique(rv)
c=0
for(q in rv[-1]){
term=gsub('beta_','',gsub('\\[.+\\]','',q))[1]
if(term%in%names(hbm@vars[[3]])){
ints=c()
for(item in hbm@vars[[3]][[term]]){
int_q=gsub('beta_',paste('beta_int_',item,sep=''),q)
rv=c(rv,list(int_q))
ints=c(ints,str_interp("(${paste(int_q,collapse='+')})*${item}[i][i]"))}
c=c+1;right=c(right,str_interp("(${paste(paste(q,collapse='+'),paste(ints,collapse='+'),sep='+')})*${hbm@vars[[1]][c]}[i]"))}
else{c=c+1;right=c(right,str_interp("(${paste(q,collapse='+')})*${hbm@vars[[1]][c]}[i]"))}}
rv=unique(rv)
right=gsub('\\[i\\]\\)',')',gsub('\\[i\\]\\+','+',right))
rn=gsub('\\[i\\]$','',rv[[1]])
rn_ints=list()
simple=rn
for(term in hbm@vars[[3]]){
for(item in unique(term)){
int=gsub('^alpha',paste('Alpha_int_',item,sep=''),simple)
rn_ints=c(rn_ints,list(int))
int=paste('(',paste(int,collapse='+'),')*',item,'[i]',sep='')
rn=c(rn,paste(int))}}
top=str_interp("for(i in 1:N){\n\t${left}\n\tmu[i]=${paste(rn,collapse='+')}+\n\t${paste(right,collapse='+\n\t')}}")
s=t=c()
rv=c(rv,rn_ints)
for(q in hbm@vars[[2]]){
snam='sigma';tnam='tau'
s=c(s,paste(snam,q,sep='_'))
t=c(t,paste(tnam,q,sep='_'))}
s=gsub('_$','',s)
t=gsub('_$','',t)
bottom=paste(s,'~dunif(0,100)\n',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()
if(q!=''){
bottom=paste('a',s,'~dunif(0,100)\n','a',t,'=1/(',s,'*',s,')',sep='')|>
(\(x)paste(x,collapse='\n'))()|>
(\(x)paste(bottom,x,sep='\n'))()}
bottom=str_interp("${bottom}\n${paste(paste(gsub('\\\\[.+\\\\]','',as.data.frame(rv)[1,]),'~dnorm(0,0.01)',sep=''),collapse='\n')}")
middle=c()
if(length(hbm@vars[[2]])>1){
for(q in 1:(length(hbm@vars[[2]])-1)){
loop=str_interp('for(${letters[q]} in 1:N${hbm@vars[[2]][-1][q]}${c("",paste("[",letters,"]",sep=""))[q]}){')
types=c()
for(r in rv){
if(regexpr('^[aA]lpha',r[1])>0){
types=c(types,str_interp('~dnorm(0,a${t[q+1]})'))}
else{types=c(types,str_interp('~dnorm(0,${t[q+1]})'))}}
lines=gsub(is[q+1],paste(paste('[',letters[1:q],']',sep=''),collapse=''),
paste(
paste(as.data.frame(rv)[q+1,],types,sep=''),
collapse='\n\t'),
fixed=T)
middle=c(middle,paste(loop,lines,sep='\n\t'))}}
middle=paste(middle,collapse='\n')|>
(\(x)paste(c(x,rep('}',length(hbm@vars[[2]])-1)),collapse=''))()
tail=paste(c(str_interp('${as.character(hbm@input$model)[2]}.fit=sum(pow(${as.character(hbm@input$model)[2]}.res[],2)/tau)'),
str_interp('${as.character(hbm@input$model)[2]}.sfit=sum(pow(${as.character(hbm@input$model)[2]}.sres[],2)/tau)')),collapse='\n')
hbm@model=str_interp("model{\n${paste(top,middle,bottom,tail,sep='\n')}\n}")|>
(\(x)gsub('\\]\\[',',',x))()|>
(\(x)gsub('\\[i\\]',paste(c('\\[',new_i,'\\]'),collapse=''),x))()|>
(\(x)gsub('for\\(i',paste(c('for\\(',new_i),collapse=''),x))()
if(hbm@source_model==''){
writeLines(hbm@model,paste(hbm@model_dir,hbm@model_name,'.txt',sep=''))}
hbm@save=c(str_interp('${as.character(hbm@input$model)[2]}.sfit'),
str_interp('${as.character(hbm@input$model)[2]}.fit'))
for(i in rv){hbm@save=c(hbm@save,i)}
hbm@save=gsub('\\[.+\\]','',hbm@save)
return(hbm)}
#################################################################################
hbm=function(data,model,...){
output=new('hbm')
param=list(...)
defaults=list('name'        ='unnamed_hbm',
'model_name'  ='unnamed_model',
'dir'         ='./',
'dist'        ='dnorm',
'model_dir'   ='',
'n.adapt'     =2000,
'n.burnin'    =1000,
'n.iter'      =10000,
'n.chains'    =4,
'source_model'='')
default=c(list('data' =data,
'input'=match.call(expand.dots=T)),
lapply(names(defaults),\(x)ifelse(is.null(param[[x]]),
defaults[[x]],
param[[x]]))|>
setNames(names(defaults)))
for(d in names(default)){
if(class(default[[d]])==class(slot(output,d))){slot(output,d)=default[[d]]}
else{
cat('Invalid input for variable "',d,'"\n',sep='')
return()}}
if(!(output@dist%in%c('dnorm'))){
cat('Distribution "',output@dist,'" not yet implemented',sep='')
return()}
if(output@source_model==''){
output=tryCatch(write_model(output),error=\(x){print(x);return(output)})}
output=tryCatch(format_data(output),error=\(x){print(x);return(output)})
output=tryCatch(run_model(output),error=\(x){print(x);return(output)})
output=tryCatch(format_model(output),error=\(x){print(x);return(output)})
return(output)
}
#o=hbm(data.frame('herb'=1:10,'div'=1:10,'flood'=1,'site'='a','sex'='moose'),herb~div:flood+(site+sex),name='testing')
source('C:/Users/Ari/Documents/Scripts/helper functions/generators.R')
library(ggplot2)
data=data.frame('mass'=rep(0:1,each=50),'length'=rep(0:1,each=50)+rnorm(100,1,.1),'sex'=rep(c('0','1','0','1'),each=25),'b'=rep(c('A','B'),50))
data$length[data$sex=='1']=5*abs(data$length[data$sex=='1'])
#data$length[data$site=='B']=-1*abs(data$length[data$site=='B'])
data$site=data$b
ggplot(data,aes(x=mass,y=length,color=as.factor(sex)))+
geom_point()+
geom_smooth(method=lm,alpha=0)+
facet_grid(cols=vars(b))+
theme_classic()
o=hbm(data,length~mass:sex+(site))
o@output
o
